{
  "_args": [
    [
      {
        "raw": "@typescript-eslint/eslint-plugin@1.13.0",
        "scope": "@typescript-eslint",
        "escapedName": "@typescript-eslint%2feslint-plugin",
        "name": "@typescript-eslint/eslint-plugin",
        "rawSpec": "1.13.0",
        "spec": "1.13.0",
        "type": "version"
      },
      "J:\\Projects\\youconnect\\node_modules\\react-scripts"
    ]
  ],
  "_from": "@typescript-eslint/eslint-plugin@1.13.0",
  "_hasShrinkwrap": false,
  "_id": "@typescript-eslint/eslint-plugin@1.13.0",
  "_location": "/@typescript-eslint/eslint-plugin",
  "_nodeVersion": "10.16.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/eslint-plugin_1.13.0_1563728614920_0.681066981688119"
  },
  "_npmUser": {
    "name": "jameshenry",
    "email": "npm@jameshenry.email"
  },
  "_npmVersion": "lerna/3.13.4/node@v10.16.0+x64 (linux)",
  "_phantomChildren": {},
  "_requested": {
    "raw": "@typescript-eslint/eslint-plugin@1.13.0",
    "scope": "@typescript-eslint",
    "escapedName": "@typescript-eslint%2feslint-plugin",
    "name": "@typescript-eslint/eslint-plugin",
    "rawSpec": "1.13.0",
    "spec": "1.13.0",
    "type": "version"
  },
  "_requiredBy": [
    "/react-scripts"
  ],
  "_resolved": "https://registry.npmjs.org/@typescript-eslint/eslint-plugin/-/eslint-plugin-1.13.0.tgz",
  "_shasum": "22fed9b16ddfeb402fd7bcde56307820f6ebc49f",
  "_shrinkwrap": null,
  "_spec": "@typescript-eslint/eslint-plugin@1.13.0",
  "_where": "J:\\Projects\\youconnect\\node_modules\\react-scripts",
  "bugs": {
    "url": "https://github.com/typescript-eslint/typescript-eslint/issues"
  },
  "dependencies": {
    "@typescript-eslint/experimental-utils": "1.13.0",
    "eslint-utils": "^1.3.1",
    "functional-red-black-tree": "^1.0.1",
    "regexpp": "^2.0.1",
    "tsutils": "^3.7.0"
  },
  "description": "TypeScript plugin for ESLint",
  "devDependencies": {
    "@types/json-schema": "^7.0.3",
    "@types/marked": "^0.6.5",
    "chalk": "^2.4.2",
    "marked": "^0.6.2"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-WQHCozMnuNADiqMtsNzp96FNox5sOVpU8Xt4meaT4em8lOG1SrOv92/mUbEHQVh90sldKSfcOc/I0FOb/14G1g==",
    "shasum": "22fed9b16ddfeb402fd7bcde56307820f6ebc49f",
    "tarball": "https://registry.npmjs.org/@typescript-eslint/eslint-plugin/-/eslint-plugin-1.13.0.tgz",
    "fileCount": 219,
    "unpackedSize": 886791,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJdNJroCRA9TVsSAnZWagAAxloP/3hfEJCwCc+EC7OsyCAr\nkDcOMUnObuwyf44FYFR15Nzeap7JdA1s0WXMLMXhrQTQseYO8WVdZYsHi2GD\nDvAusR1+kkrbsH57smSQ8MepMPHM8k7w2C1I1cJ/urClE/g1OS8FPS+aT6dx\nFUHUjd+ziZUjNSpspWMSCkRjDFxpl9LskKxr7R2qe8pgEY+x/tHmn6QWxDQd\n3S8RKJlFV1syOo55JBllz2vi73TJdkxkCACCtP0LUhrtAnIVLzrGL7HBcBPa\ndiuPFaNrl25ckLK8o0S0Zzgb/LrTS4Pzs0SibwnlER/HcSBImYX5NR429I4U\nOhn8cVC5YPKAZt1roKLzG9oyXdARKTtbrH286QL9PUnNk5OPlm7aCJPvm+TN\nAp3TJZqtxAEgenFZ11SPuDAuJLD3KE5wjx2Xo/4ackE6YX+Cc4AfZRF/kFRH\nHhlllW09Jfx3s/2tYKTiSHe73lsUmmz2VqeNvDGFr4Z0wyq18xDbTVmvF6D/\nXBbxHCyivkkwVcS4/t0tskcxlPWPpH3FQnacXoeSSIhaxHsPMCKhrnYCuQ8c\nNAadzB+Qs9q7lOWSEqEUpKfaTGqsgVT5DV3U8yU5v5NGS4/UB9oNSPVp6a71\nNKujTa+K2ZF0+lJrrFXx/cyfDwW1V6MkQMyvb1Wr1cktjn+ZksMOWs9vEHG2\ndCCP\r\n=eyQ8\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "engines": {
    "node": "^6.14.0 || ^8.10.0 || >=9.10.0"
  },
  "files": [
    "dist",
    "docs",
    "package.json",
    "README.md",
    "LICENSE"
  ],
  "gitHead": "c367b34abd8c58eddd2c15685ed8c17b983f0da1",
  "homepage": "https://github.com/typescript-eslint/typescript-eslint#readme",
  "keywords": [
    "eslint",
    "eslintplugin",
    "eslint-plugin",
    "typescript"
  ],
  "license": "MIT",
  "main": "dist/index.js",
  "maintainers": [
    {
      "name": "jameshenry",
      "email": "james@henry.sc"
    }
  ],
  "name": "@typescript-eslint/eslint-plugin",
  "optionalDependencies": {},
  "peerDependencies": {
    "@typescript-eslint/parser": "^1.9.0",
    "eslint": "^5.0.0"
  },
  "readme": "<h1 align=\"center\">ESLint Plugin TypeScript</h1>\n\n<p align=\"center\">\n    <a href=\"https://dev.azure.com/typescript-eslint/TypeScript%20ESLint/_build/latest?definitionId=1&branchName=master\"><img src=\"https://img.shields.io/azure-devops/build/typescript-eslint/TypeScript%20ESLint/1/master.svg?label=%F0%9F%9A%80%20Azure%20Pipelines&style=flat-square\" alt=\"Azure Pipelines\"/></a>\n    <a href=\"https://github.com/typescript-eslint/typescript-eslint/blob/master/LICENSE\"><img src=\"https://img.shields.io/npm/l/typescript-estree.svg?style=flat-square\" alt=\"GitHub license\" /></a>\n    <a href=\"https://www.npmjs.com/package/@typescript-eslint/eslint-plugin\"><img src=\"https://img.shields.io/npm/v/@typescript-eslint/eslint-plugin.svg?style=flat-square\" alt=\"NPM Version\" /></a>\n    <a href=\"https://www.npmjs.com/package/@typescript-eslint/eslint-plugin\"><img src=\"https://img.shields.io/npm/dm/@typescript-eslint/eslint-plugin.svg?style=flat-square\" alt=\"NPM Downloads\" /></a>\n    <a href=\"http://commitizen.github.io/cz-cli/\"><img src=\"https://img.shields.io/badge/commitizen-friendly-brightgreen.svg?style=flat-square\" alt=\"Commitizen friendly\" /></a>\n</p>\n\n## Installation\n\nMake sure you have TypeScript and @typescript-eslint/parser installed, then install the plugin:\n\n```sh\nnpm i @typescript-eslint/eslint-plugin --save-dev\n```\n\nIt is important that you use the same version number for `@typescript-eslint/parser` and `@typescript-eslint/eslint-plugin`.\n\n**Note:** If you installed ESLint globally (using the `-g` flag) then you must also install `@typescript-eslint/eslint-plugin` globally.\n\n## Usage\n\nAdd `@typescript-eslint/parser` to the `parser` field and `@typescript-eslint` to the plugins section of your `.eslintrc` configuration file:\n\n```json\n{\n  \"parser\": \"@typescript-eslint/parser\",\n  \"plugins\": [\"@typescript-eslint\"]\n}\n```\n\nThen configure the rules you want to use under the rules section.\n\n```json\n{\n  \"parser\": \"@typescript-eslint/parser\",\n  \"plugins\": [\"@typescript-eslint\"],\n  \"rules\": {\n    \"@typescript-eslint/rule-name\": \"error\"\n  }\n}\n```\n\nYou can also enable all the recommended rules for our plugin. Add `plugin:@typescript-eslint/recommended` in extends:\n\n```json\n{\n  \"extends\": [\"plugin:@typescript-eslint/recommended\"]\n}\n```\n\nYou can also use [eslint:recommended](https://eslint.org/docs/rules/) with this plugin. Add both `eslint:recommended` and `plugin:@typescript-eslint/eslint-recommended`:\n\n```json\n{\n  \"extends\": [\n    \"eslint:recommended\",\n    \"plugin:@typescript-eslint/eslint-recommended\",\n    \"plugin:@typescript-eslint/recommended\"\n  ]\n}\n```\n\nIf you want to use rules which require type information, you will need to specify a path to your tsconfig.json file in the \"project\" property of \"parserOptions\".\n\n```json\n{\n  \"parser\": \"@typescript-eslint/parser\",\n  \"parserOptions\": {\n    \"project\": \"./tsconfig.json\"\n  },\n  \"plugins\": [\"@typescript-eslint\"],\n  \"rules\": {\n    \"@typescript-eslint/restrict-plus-operands\": \"error\"\n  }\n}\n```\n\nSee [@typescript-eslint/parser's README.md](../parser/README.md) for more information on the available \"parserOptions\".\n\n**Note: Make sure to use `eslint --ext .js,.ts` since by [default](https://eslint.org/docs/user-guide/command-line-interface#--ext) `eslint` will only search for .js files.**\n\n## Usage with Prettier\n\nInstall [`eslint-config-prettier`](https://github.com/prettier/eslint-config-prettier) to disable our code formatting related rules:\n\n```json\n{\n  \"extends\": [\n    \"plugin:@typescript-eslint/recommended\",\n    \"prettier\",\n    \"prettier/@typescript-eslint\"\n  ]\n}\n```\n\n**Note: Make sure you have `eslint-config-prettier@4.0.0` or newer.**\n\n## Usage with Airbnb\n\nAirbnb has two configs, a base one [`eslint-config-airbnb-base`](https://github.com/airbnb/javascript/tree/master/packages/eslint-config-airbnb-base) and one that includes rules for React [`eslint-config-airbnb`](https://github.com/airbnb/javascript/tree/master/packages/eslint-config-airbnb).\n\nFirst you'll need to install the config according to the instructions in one of the links above. `npx install-peerdeps --dev eslint-config-airbnb` or `npx install-peerdeps --dev eslint-config-airbnb-base` should work if you are using **npm 5+**.\n\nThen you should add `airbnb` (or `airbnb-base`) to your `extends` section of `.eslintrc`. You might also want to turn on `plugin:@typescript-eslint/recommended` as well to enable all of the recommended rules.\n\n```json\n{\n  \"extends\": [\"airbnb-base\", \"plugin:@typescript-eslint/recommended\"]\n}\n```\n\n**Note: You can use Airbnb's rules alongside Prettier, see [Usage with Prettier](#usage-with-prettier)**\n\n## Supported Rules\n\n<!-- begin rule list -->\n\n**Key**: :heavy_check_mark: = recommended, :wrench: = fixable, :thought_balloon: = requires type information\n\n<!-- prettier-ignore -->\n| Name                                                                                                      | Description                                                                                                                                         | :heavy_check_mark: | :wrench: | :thought_balloon: |\n| --------------------------------------------------------------------------------------------------------- | --------------------------------------------------------------------------------------------------------------------------------------------------- | ------------------ | -------- | ----------------- |\n| [`@typescript-eslint/adjacent-overload-signatures`](./docs/rules/adjacent-overload-signatures.md)         | Require that member overloads be consecutive                                                                                                        | :heavy_check_mark: |          |                   |\n| [`@typescript-eslint/array-type`](./docs/rules/array-type.md)                                             | Requires using either `T[]` or `Array<T>` for arrays                                                                                                | :heavy_check_mark: | :wrench: |                   |\n| [`@typescript-eslint/await-thenable`](./docs/rules/await-thenable.md)                                     | Disallows awaiting a value that is not a Thenable                                                                                                   |                    |          | :thought_balloon: |\n| [`@typescript-eslint/ban-ts-ignore`](./docs/rules/ban-ts-ignore.md)                                       | Bans “// @ts-ignore” comments from being used                                                                                                       |                    |          |                   |\n| [`@typescript-eslint/ban-types`](./docs/rules/ban-types.md)                                               | Enforces that types will not to be used                                                                                                             | :heavy_check_mark: | :wrench: |                   |\n| [`@typescript-eslint/camelcase`](./docs/rules/camelcase.md)                                               | Enforce camelCase naming convention                                                                                                                 | :heavy_check_mark: |          |                   |\n| [`@typescript-eslint/class-name-casing`](./docs/rules/class-name-casing.md)                               | Require PascalCased class and interface names                                                                                                       | :heavy_check_mark: |          |                   |\n| [`@typescript-eslint/consistent-type-definitions`](./docs/rules/consistent-type-definitions.md)           | Consistent with type definition either `interface` or `type`                                                                                        |                    | :wrench: |                   |\n| [`@typescript-eslint/explicit-function-return-type`](./docs/rules/explicit-function-return-type.md)       | Require explicit return types on functions and class methods                                                                                        | :heavy_check_mark: |          |                   |\n| [`@typescript-eslint/explicit-member-accessibility`](./docs/rules/explicit-member-accessibility.md)       | Require explicit accessibility modifiers on class properties and methods                                                                            | :heavy_check_mark: |          |                   |\n| [`@typescript-eslint/func-call-spacing`](./docs/rules/func-call-spacing.md)                               | Require or disallow spacing between function identifiers and their invocations                                                                      |                    | :wrench: |                   |\n| [`@typescript-eslint/generic-type-naming`](./docs/rules/generic-type-naming.md)                           | Enforces naming of generic type variables                                                                                                           |                    |          |                   |\n| [`@typescript-eslint/indent`](./docs/rules/indent.md)                                                     | Enforce consistent indentation                                                                                                                      | :heavy_check_mark: | :wrench: |                   |\n| [`@typescript-eslint/interface-name-prefix`](./docs/rules/interface-name-prefix.md)                       | Require that interface names be prefixed with `I`                                                                                                   | :heavy_check_mark: |          |                   |\n| [`@typescript-eslint/member-delimiter-style`](./docs/rules/member-delimiter-style.md)                     | Require a specific member delimiter style for interfaces and type literals                                                                          | :heavy_check_mark: | :wrench: |                   |\n| [`@typescript-eslint/member-naming`](./docs/rules/member-naming.md)                                       | Enforces naming conventions for class members by visibility                                                                                         |                    |          |                   |\n| [`@typescript-eslint/member-ordering`](./docs/rules/member-ordering.md)                                   | Require a consistent member declaration order                                                                                                       |                    |          |                   |\n| [`@typescript-eslint/no-angle-bracket-type-assertion`](./docs/rules/no-angle-bracket-type-assertion.md)   | Enforces the use of `as Type` assertions instead of `<Type>` assertions                                                                             | :heavy_check_mark: |          |                   |\n| [`@typescript-eslint/no-array-constructor`](./docs/rules/no-array-constructor.md)                         | Disallow generic `Array` constructors                                                                                                               | :heavy_check_mark: | :wrench: |                   |\n| [`@typescript-eslint/no-empty-function`](./docs/rules/no-empty-function.md)                               | Disallow empty functions                                                                                                                            |                    |          |                   |\n| [`@typescript-eslint/no-empty-interface`](./docs/rules/no-empty-interface.md)                             | Disallow the declaration of empty interfaces                                                                                                        | :heavy_check_mark: |          |                   |\n| [`@typescript-eslint/no-explicit-any`](./docs/rules/no-explicit-any.md)                                   | Disallow usage of the `any` type                                                                                                                    | :heavy_check_mark: | :wrench: |                   |\n| [`@typescript-eslint/no-extra-parens`](./docs/rules/no-extra-parens.md)                                   | Disallow unnecessary parentheses                                                                                                                    |                    | :wrench: |                   |\n| [`@typescript-eslint/no-extraneous-class`](./docs/rules/no-extraneous-class.md)                           | Forbids the use of classes as namespaces                                                                                                            |                    |          |                   |\n| [`@typescript-eslint/no-floating-promises`](./docs/rules/no-floating-promises.md)                         | Requires Promise-like values to be handled appropriately.                                                                                           |                    |          | :thought_balloon: |\n| [`@typescript-eslint/no-for-in-array`](./docs/rules/no-for-in-array.md)                                   | Disallow iterating over an array with a for-in loop                                                                                                 |                    |          | :thought_balloon: |\n| [`@typescript-eslint/no-inferrable-types`](./docs/rules/no-inferrable-types.md)                           | Disallows explicit type declarations for variables or parameters initialized to a number, string, or boolean                                        | :heavy_check_mark: | :wrench: |                   |\n| [`@typescript-eslint/no-magic-numbers`](./docs/rules/no-magic-numbers.md)                                 | Disallows magic numbers                                                                                                                             |                    |          |                   |\n| [`@typescript-eslint/no-misused-new`](./docs/rules/no-misused-new.md)                                     | Enforce valid definition of `new` and `constructor`                                                                                                 | :heavy_check_mark: |          |                   |\n| [`@typescript-eslint/no-misused-promises`](./docs/rules/no-misused-promises.md)                           | Avoid using promises in places not designed to handle them                                                                                          |                    |          | :thought_balloon: |\n| [`@typescript-eslint/no-namespace`](./docs/rules/no-namespace.md)                                         | Disallow the use of custom TypeScript modules and namespaces                                                                                        | :heavy_check_mark: |          |                   |\n| [`@typescript-eslint/no-non-null-assertion`](./docs/rules/no-non-null-assertion.md)                       | Disallows non-null assertions using the `!` postfix operator                                                                                        | :heavy_check_mark: |          |                   |\n| [`@typescript-eslint/no-object-literal-type-assertion`](./docs/rules/no-object-literal-type-assertion.md) | Forbids an object literal to appear in a type assertion expression                                                                                  | :heavy_check_mark: |          |                   |\n| [`@typescript-eslint/no-parameter-properties`](./docs/rules/no-parameter-properties.md)                   | Disallow the use of parameter properties in class constructors                                                                                      | :heavy_check_mark: |          |                   |\n| [`@typescript-eslint/no-require-imports`](./docs/rules/no-require-imports.md)                             | Disallows invocation of `require()`                                                                                                                 |                    |          |                   |\n| [`@typescript-eslint/no-this-alias`](./docs/rules/no-this-alias.md)                                       | Disallow aliasing `this`                                                                                                                            |                    |          |                   |\n| [`@typescript-eslint/no-type-alias`](./docs/rules/no-type-alias.md)                                       | Disallow the use of type aliases                                                                                                                    |                    |          |                   |\n| [`@typescript-eslint/no-unnecessary-qualifier`](./docs/rules/no-unnecessary-qualifier.md)                 | Warns when a namespace qualifier is unnecessary                                                                                                     |                    | :wrench: | :thought_balloon: |\n| [`@typescript-eslint/no-unnecessary-type-assertion`](./docs/rules/no-unnecessary-type-assertion.md)       | Warns if a type assertion does not change the type of an expression                                                                                 |                    | :wrench: | :thought_balloon: |\n| [`@typescript-eslint/no-unused-vars`](./docs/rules/no-unused-vars.md)                                     | Disallow unused variables                                                                                                                           | :heavy_check_mark: |          |                   |\n| [`@typescript-eslint/no-use-before-define`](./docs/rules/no-use-before-define.md)                         | Disallow the use of variables before they are defined                                                                                               | :heavy_check_mark: |          |                   |\n| [`@typescript-eslint/no-useless-constructor`](./docs/rules/no-useless-constructor.md)                     | Disallow unnecessary constructors                                                                                                                   |                    |          |                   |\n| [`@typescript-eslint/no-var-requires`](./docs/rules/no-var-requires.md)                                   | Disallows the use of require statements except in import statements                                                                                 | :heavy_check_mark: |          |                   |\n| [`@typescript-eslint/prefer-for-of`](./docs/rules/prefer-for-of.md)                                       | Prefer a ‘for-of’ loop over a standard ‘for’ loop if the index is only used to access the array being iterated                                      |                    |          |                   |\n| [`@typescript-eslint/prefer-function-type`](./docs/rules/prefer-function-type.md)                         | Use function types instead of interfaces with call signatures                                                                                       |                    | :wrench: |                   |\n| [`@typescript-eslint/prefer-includes`](./docs/rules/prefer-includes.md)                                   | Enforce `includes` method over `indexOf` method                                                                                                     |                    | :wrench: | :thought_balloon: |\n| [`@typescript-eslint/prefer-namespace-keyword`](./docs/rules/prefer-namespace-keyword.md)                 | Require the use of the `namespace` keyword instead of the `module` keyword to declare custom TypeScript modules                                     | :heavy_check_mark: | :wrench: |                   |\n| [`@typescript-eslint/prefer-readonly`](./docs/rules/prefer-readonly.md)                                   | Requires that private members are marked as `readonly` if they're never modified outside of the constructor                                         |                    | :wrench: | :thought_balloon: |\n| [`@typescript-eslint/prefer-regexp-exec`](./docs/rules/prefer-regexp-exec.md)                             | Prefer RegExp#exec() over String#match() if no global flag is provided                                                                              |                    |          | :thought_balloon: |\n| [`@typescript-eslint/prefer-string-starts-ends-with`](./docs/rules/prefer-string-starts-ends-with.md)     | Enforce the use of `String#startsWith` and `String#endsWith` instead of other equivalent methods of checking substrings                             |                    | :wrench: | :thought_balloon: |\n| [`@typescript-eslint/promise-function-async`](./docs/rules/promise-function-async.md)                     | Requires any function or method that returns a Promise to be marked async                                                                           |                    |          | :thought_balloon: |\n| [`@typescript-eslint/require-array-sort-compare`](./docs/rules/require-array-sort-compare.md)             | Enforce giving `compare` argument to `Array#sort`                                                                                                   |                    |          | :thought_balloon: |\n| [`@typescript-eslint/require-await`](./docs/rules/require-await.md)                                       | Disallow async functions which have no `await` expression                                                                                           |                    |          | :thought_balloon: |\n| [`@typescript-eslint/restrict-plus-operands`](./docs/rules/restrict-plus-operands.md)                     | When adding two variables, operands must both be of type number or of type string                                                                   |                    |          | :thought_balloon: |\n| [`@typescript-eslint/semi`](./docs/rules/semi.md)                                                         | Require or disallow semicolons instead of ASI                                                                                                       |                    | :wrench: |                   |\n| [`@typescript-eslint/strict-boolean-expressions`](./docs/rules/strict-boolean-expressions.md)             | Restricts the types allowed in boolean expressions                                                                                                  |                    |          | :thought_balloon: |\n| [`@typescript-eslint/triple-slash-reference`](./docs/rules/triple-slash-reference.md)                     | Sets preference level for triple slash directives versus ES6-style import declarations                                                              |                    |          |                   |\n| [`@typescript-eslint/type-annotation-spacing`](./docs/rules/type-annotation-spacing.md)                   | Require consistent spacing around type annotations                                                                                                  | :heavy_check_mark: | :wrench: |                   |\n| [`@typescript-eslint/unbound-method`](./docs/rules/unbound-method.md)                                     | Enforces unbound methods are called with their expected scope                                                                                       |                    |          | :thought_balloon: |\n| [`@typescript-eslint/unified-signatures`](./docs/rules/unified-signatures.md)                             | Warns for any two overloads that could be unified into one by using a union or an optional/rest parameter                                           |                    |          |                   |\n\n<!-- end rule list -->\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/typescript-eslint/typescript-eslint.git",
    "directory": "packages/eslint-plugin"
  },
  "scripts": {
    "build": "tsc -p tsconfig.build.json",
    "check:configs": "ts-node --files ./tools/validate-configs/index.ts",
    "check:docs": "ts-node --files ./tools/validate-docs/index.ts",
    "clean": "rimraf dist/",
    "format": "prettier --write \"./**/*.{ts,js,json,md}\" --ignore-path ../../.prettierignore",
    "generate:configs": "ts-node --files tools/generate-configs.ts",
    "prebuild": "npm run clean",
    "test": "jest --coverage",
    "typecheck": "tsc --noEmit"
  },
  "version": "1.13.0",
  "warnings": [
    {
      "code": "ENOTSUP",
      "required": {
        "node": "^6.14.0 || ^8.10.0 || >=9.10.0"
      },
      "pkgid": "@typescript-eslint/eslint-plugin@1.13.0"
    }
  ]
}
