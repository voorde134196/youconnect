{
  "_args": [
    [
      {
        "raw": "jest-docblock@^24.3.0",
        "scope": null,
        "escapedName": "jest-docblock",
        "name": "jest-docblock",
        "rawSpec": "^24.3.0",
        "spec": ">=24.3.0 <25.0.0",
        "type": "range"
      },
      "J:\\Projects\\youconnect\\node_modules\\jest-runner"
    ]
  ],
  "_from": "jest-docblock@^24.3.0",
  "_hasShrinkwrap": false,
  "_id": "jest-docblock@24.9.0",
  "_location": "/jest-docblock",
  "_nodeVersion": "11.12.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/jest-docblock_24.9.0_1565934946555_0.7586727128820485"
  },
  "_npmUser": {
    "name": "scotthovestadt",
    "email": "scott.hovestadt@gmail.com"
  },
  "_npmVersion": "lerna/3.15.0/node@v11.12.0+x64 (darwin)",
  "_phantomChildren": {},
  "_requested": {
    "raw": "jest-docblock@^24.3.0",
    "scope": null,
    "escapedName": "jest-docblock",
    "name": "jest-docblock",
    "rawSpec": "^24.3.0",
    "spec": ">=24.3.0 <25.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/jest-runner"
  ],
  "_resolved": "https://registry.npmjs.org/jest-docblock/-/jest-docblock-24.9.0.tgz",
  "_shasum": "7970201802ba560e1c4092cc25cbedf5af5a8ce2",
  "_shrinkwrap": null,
  "_spec": "jest-docblock@^24.3.0",
  "_where": "J:\\Projects\\youconnect\\node_modules\\jest-runner",
  "bugs": {
    "url": "https://github.com/facebook/jest/issues"
  },
  "dependencies": {
    "detect-newline": "^2.1.0"
  },
  "description": "`jest-docblock` is a package that can extract and parse a specially-formatted comment called a \"docblock\" at the top of a file.",
  "devDependencies": {
    "@types/detect-newline": "^2.1.0"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-F1DjdpDMJMA1cN6He0FNYNZlo3yYmOtRUnktrT9Q37njYzC5WEaDdmbynIgy0L/IvXvvgsG8OsqhLPXTpfmZAA==",
    "shasum": "7970201802ba560e1c4092cc25cbedf5af5a8ce2",
    "tarball": "https://registry.npmjs.org/jest-docblock/-/jest-docblock-24.9.0.tgz",
    "fileCount": 6,
    "unpackedSize": 9458,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJdVkVjCRA9TVsSAnZWagAAQXgP/3Ol5EZIb6H2hc7ht3qL\n+9k68wFUkYGmhSg+DGKF4d0Cbgb+BfuY8nqrrWS8MMgJH/jn9gE8PGEsg1cA\nL1BYBz0mat59XhbjUF6swVKK0pzQDxCFtceYLZXRW9MVS0rDBEKHDJAOSdsM\nI7ZPwgWcYucHjw5pJPtHuTGeyooUxFcIdtlmdm5bs31h2O/UaHUCloNZ2JKe\nyz4tnGJpcCX7CdWm6gCqaMwLr9W6vCOKgnPqHrryKSRqmT6zzu/tBjic7f7T\nLgbSKeqr9b1SrcIUk2ABru96E85iArzQdNQeWGIZPvjK/VeHDdKdnrV+8cvJ\njzON8X7gpRdZsnCNPbOjVjwmDlgdEb5SEGTvWwETMNEYun6NN80dbFxId0HW\n5we/8npnsrkjnDm/tLfUn32LwTAYq2nV4XP5XbXCHWHZ7Ty/9s8OJz0bRInI\nJN5xtmmyn7zXWv4OBjwlUipAC9TSWtKVWOdrpzSqURx8I3CgOU2tVxmJCLN8\nULZP7ogzkjamidOYKmp+A6S0xIKgHjF5xMpEI9hnZvR8Os4odHnyyFnOmv6Q\niwoxLx3bG6d54DC43tqnlfSJ6xP+uMBnrqKqsLUfQf7iFSupuGsP9XoGiACY\nc6vGtwcaMngkzjebSU5Uk3y0sOHjDYqaGU6YRAPMt/dXbMq9fLixOkTbmM7s\nHIFA\r\n=ZuPv\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "engines": {
    "node": ">= 6"
  },
  "gitHead": "9ad0f4bc6b8bdd94989804226c28c9960d9da7d1",
  "homepage": "https://github.com/facebook/jest#readme",
  "license": "MIT",
  "main": "build/index.js",
  "maintainers": [
    {
      "name": "aaronabramov",
      "email": "aaron@abramov.io"
    },
    {
      "name": "cpojer",
      "email": "christoph.pojer@gmail.com"
    },
    {
      "name": "fb",
      "email": "opensource+npm@fb.com"
    },
    {
      "name": "jeanlauliac",
      "email": "jean@lauliac.com"
    },
    {
      "name": "rubennorte",
      "email": "rubennorte@gmail.com"
    },
    {
      "name": "scotthovestadt",
      "email": "scott.hovestadt@gmail.com"
    }
  ],
  "name": "jest-docblock",
  "optionalDependencies": {},
  "publishConfig": {
    "access": "public"
  },
  "readme": "# jest-docblock\n\n`jest-docblock` is a package that can extract and parse a specially-formatted comment called a \"docblock\" at the top of a file.\n\nA docblock looks like this:\n\n```js\n/**\n * Stuff goes here!\n */\n```\n\nDocblocks can contain pragmas, which are words prefixed by `@`:\n\n```js\n/**\n * Pragma incoming!\n *\n * @flow\n */\n```\n\nPragmas can also take arguments:\n\n```js\n/**\n * Check this out:\n *\n * @myPragma it is so cool\n */\n```\n\n`jest-docblock` can:\n\n- extract the docblock from some code as a string\n- parse a docblock string's pragmas into an object\n- print an object and some comments back to a string\n\n## Installation\n\n```sh\n# with yarn\n$ yarn add jest-docblock\n# with npm\n$ npm install jest-docblock\n```\n\n## Usage\n\n```js\nconst code = `\n/**\n * Everything is awesome!\n *\n * @everything is:awesome\n * @flow\n */\n\n export const everything = Object.create(null);\n export default function isAwesome(something) {\n   return something === everything;\n }\n`;\n\nconst {\n  extract,\n  strip,\n  parse,\n  parseWithComments,\n  print,\n} = require('jest-docblock');\n\nconst docblock = extract(code);\nconsole.log(docblock); // \"/**\\n * Everything is awesome!\\n * \\n * @everything is:awesome\\n * @flow\\n */\"\n\nconst stripped = strip(code);\nconsole.log(stripped); // \"export const everything = Object.create(null);\\n export default function isAwesome(something) {\\n return something === everything;\\n }\"\n\nconst pragmas = parse(docblock);\nconsole.log(pragmas); // { everything: \"is:awesome\", flow: \"\" }\n\nconst parsed = parseWithComments(docblock);\nconsole.log(parsed); // { comments: \"Everything is awesome!\", pragmas: { everything: \"is:awesome\", flow: \"\" } }\n\nconsole.log(print({pragmas, comments: 'hi!'})); // /**\\n * hi!\\n *\\n * @everything is:awesome\\n * @flow\\n */;\n```\n\n## API Documentation\n\n### `extract(contents: string): string`\n\nExtracts a docblock from some file contents. Returns the docblock contained in `contents`. If `contents` did not contain a docblock, it will return the empty string (`\"\"`).\n\n### `strip(contents: string): string`\n\nStrips the top docblock from a file and return the result. If a file does not have a docblock at the top, then return the file unchanged.\n\n### `parse(docblock: string): {[key: string]: string | string[] }`\n\nParses the pragmas in a docblock string into an object whose keys are the pragma tags and whose values are the arguments to those pragmas.\n\n### `parseWithComments(docblock: string): { comments: string, pragmas: {[key: string]: string | string[]} }`\n\nSimilar to `parse` except this method also returns the comments from the docblock. Useful when used with `print()`.\n\n### `print({ comments?: string, pragmas?: {[key: string]: string | string[]} }): string`\n\nPrints an object of key-value pairs back into a docblock. If `comments` are provided, they will be positioned on the top of the docblock.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/facebook/jest.git",
    "directory": "packages/jest-docblock"
  },
  "version": "24.9.0"
}
