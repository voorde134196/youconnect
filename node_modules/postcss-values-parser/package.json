{
  "_args": [
    [
      {
        "raw": "postcss-values-parser@^2.0.0",
        "scope": null,
        "escapedName": "postcss-values-parser",
        "name": "postcss-values-parser",
        "rawSpec": "^2.0.0",
        "spec": ">=2.0.0 <3.0.0",
        "type": "range"
      },
      "J:\\Projects\\youconnect\\node_modules\\postcss-color-functional-notation"
    ]
  ],
  "_from": "postcss-values-parser@^2.0.0",
  "_hasShrinkwrap": false,
  "_id": "postcss-values-parser@2.0.1",
  "_location": "/postcss-values-parser",
  "_nodeVersion": "10.13.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/postcss-values-parser_2.0.1_1547492982325_0.6234538346076379"
  },
  "_npmUser": {
    "name": "shellscape",
    "email": "andrew@shellscape.org"
  },
  "_npmVersion": "6.4.1",
  "_phantomChildren": {},
  "_requested": {
    "raw": "postcss-values-parser@^2.0.0",
    "scope": null,
    "escapedName": "postcss-values-parser",
    "name": "postcss-values-parser",
    "rawSpec": "^2.0.0",
    "spec": ">=2.0.0 <3.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/postcss-color-functional-notation",
    "/postcss-color-gray",
    "/postcss-color-hex-alpha",
    "/postcss-color-mod-function",
    "/postcss-color-rebeccapurple",
    "/postcss-custom-properties",
    "/postcss-double-position-gradients",
    "/postcss-env-function",
    "/postcss-image-set-function",
    "/postcss-lab-function",
    "/postcss-place"
  ],
  "_resolved": "https://registry.npmjs.org/postcss-values-parser/-/postcss-values-parser-2.0.1.tgz",
  "_shasum": "da8b472d901da1e205b47bdc98637b9e9e550e5f",
  "_shrinkwrap": null,
  "_spec": "postcss-values-parser@^2.0.0",
  "_where": "J:\\Projects\\youconnect\\node_modules\\postcss-color-functional-notation",
  "author": {
    "name": "Andrew Powell",
    "email": "andrew@shellscape.org",
    "url": "shellscape"
  },
  "bugs": {
    "url": "https://github.com/lesshint/postcss-values-parser/issues"
  },
  "dependencies": {
    "flatten": "^1.0.2",
    "indexes-of": "^1.0.1",
    "uniq": "^1.0.1"
  },
  "description": "A CSS property value parser for use with PostCSS",
  "devDependencies": {
    "chai": "^4.1.2",
    "chai-shallow-deep-equal": "^1.4.0",
    "eslint": "^5.6.0",
    "gulp": "^3.9.1",
    "gulp-eslint": "^5.0.0",
    "gulp-mocha": "^6.0.0"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-2tLuBsA6P4rYTNKCXYG/71C7j1pU6pK503suYOmn4xYrQIzW+opD+7FAFNuGSdZC/3Qfy334QbeMu7MEb8gOxg==",
    "shasum": "da8b472d901da1e205b47bdc98637b9e9e550e5f",
    "tarball": "https://registry.npmjs.org/postcss-values-parser/-/postcss-values-parser-2.0.1.tgz",
    "fileCount": 29,
    "unpackedSize": 84595,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJcPN52CRA9TVsSAnZWagAAmUUP/AjHrrv78F9h6M7XXsqV\ntmMifsMf1eMtdCWn3h49mdOIir70isPGY/NmbmpAfGWdI0QhRnTgK5SOCnCH\n/RY4KCCwvjBsxZ37QK/3P3aYMyeZwBgY0rvVPYBr8TLNCm7f4IsZ1XVXwUGB\n9Fn+EzXqYQnk1hUnX4qSwTLLJDggrA3qXOx30+rIYnAJHivTQkqWg9nqVKdn\n3f/m2lzauEI1D310JtqQw0rZGWKyYkM/UhoURU0n1UEos7EXyH7QBwuCDxqx\nUm/iAfnh5UE6+9si4XpXGG4WXEq9MrjC1TDbp6JVGLIDBD9BcIOmC3gp1H3O\nyr7RtWBXCQrV0n4yKaZu9kKK/tDPEfUP8EcXqBTtnZ7fqM7voeAgwcTQhm+s\nVY2N3YsFv3pDISk4gWI5WLwFPTwoct3jlgN0BNW+vAW7BMZ8UTQDj8/WH90z\n0C7jY1RXhBMsHw9MLwY5Zm1afj5YQ27k+c8st7wnN06E8p2ZxOoPQTi2c1V8\nAwDQVJ5zzyyaurEcafMdZN/jOhnTU2f7QwkfYpOLBCj36cWDUMCzBSpoPBOu\njCyTybs4yyjaECoRkw6icsBWeB+cOBxQmJ+LjsCcDsdpH4wbqOXJHeJcrP0b\nvGYdY5NCpPYdwA1FcwOp1CV/SXK8vVqrVyd8OJAmiQq6PKcu6eLClCEW2O46\nYusM\r\n=TOFQ\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "engines": {
    "node": ">=6.14.4"
  },
  "gitHead": "c00f858ab8c86ce9f06fdb702e8f26376f467248",
  "homepage": "https://github.com/lesshint/postcss-values-parser#readme",
  "keywords": [
    "css",
    "less",
    "ast",
    "postcss",
    "value",
    "values",
    "parser",
    "parsing",
    "properties"
  ],
  "license": "MIT",
  "main": "lib/index.js",
  "maintainers": [
    {
      "name": "shellscape",
      "email": "andrew@shellscape.org"
    }
  ],
  "name": "postcss-values-parser",
  "optionalDependencies": {},
  "readme": "# postcss-values-parser  [![Build Status](https://travis-ci.org/shellscape/postcss-values-parser.svg?branch=master)](https://travis-ci.org/shellscape/postcss-values-parser)\n\n<img align=\"right\" width=\"95\" height=\"95\"\n     title=\"Philosopherâ€™s stone, logo of PostCSS\"\n     src=\"http://postcss.github.io/postcss/logo.svg\">\n\nA CSS property value parser for use with [PostCSS](https://github.com/postcss/postcss),\nfollowing the same node, container, and traversal patterns as PostCSS.\n\n## &nbsp;\n<p align=\"center\">\n  <b>:rocket: &nbsp; Are you ready to tackle ES6 and hone your JavaScript Skills?</b> &nbsp; :rocket:<br/>\n  Check out these outstanding <a href=\"https://es6.io/\">ES6 courses</a> by <a href=\"https://github.com/wesbos\">@wesbos</a>\n</p>\n\n---\n\nAs with PostCSS and postcss-selector-parser, this parser generates an\n[Abstract Syntax Tree](https://en.wikipedia.org/wiki/Abstract_syntax_tree),\n(aka \"AST\") which allows for ease of traversal and granular inspection of each\npart of a property's value.\n\n## postcss-values-parser vs. postcss-value-parser\n\nYeah, it's a tad confusing. The [Lesshint](https://github.com/lesshint/lesshint)\nproject needed a parser that would allow detailed inspection of property values\nto the same degree that PostCSS and [postcss-selector-parser](https://github.com/postcss/postcss-selector-parser)\nprovided. This was especailly important for the Lesshint project, as it provides\nfor very granular rules for linting LESS.\n\n[postcss-value-parser](https://github.com/TrySound/postcss-value-parser)\nmakes a lot of assumption about how values should be parsed and how the resulting\nAST should be organized. It was also fairly out of sync with the tokenzing and\ntraversal patterns and convenience methods found in PostCSS and\npostcss-selector-parser.\n\nSo we needed an alternative, and drew upon all three projects to put together a\nvalue parser that met and exceeded our needs. The improvements include:\n\n- Written using ES6\n- Uses the same Gulp toolchain as PostCSS\n- Doesn't strip characters; eg. parenthesis\n- Full AST traversal\n- AST traversal based on node type\n- Simple methods to derive strings from the parsed result\n- Follows PostCSS patterns for whitespace between Nodes\n- Provides convenience properties for number units, colors, etc.\n\n## Usage\n\nPlease see the [API Documentation](API.md) for full usage information.\n\nAs with any NPM module, start with the install:\n\n```\nnpm install postcss-values-parser\n```\n\nUsing this parser is straightforward and doesn't require callbacks:\n\n```js\nconst parser = require('postcss-values-parser');\nconst ast = parser('#fff').parse();\n\nlet color = ast       // the Root node\n              .first  // the Value node\n              .first; // a Word node, containing the color value.\n```\n\n## Loose Mode\n\nLoose mode was introduced to support adherence to the W3C CSS Specification as\nwell as the ability to parse noncompliant CSS for variants like LESS, SCSS, and\nCSSNext. If you're working with a noncompliant or CSS-like variant, then loose\nmode is for you.\n\nFor example, the parser\nwill throw an error by default if `calc` parameters [don't adhere to the spec](https://www.w3.org/TR/css-values/#calc-syntax).\nHowever, with loose mode enabled, the parse will ignore spec rules and succeed.\n\nIn-draft features, or CSS features in modules not yet finalized, often cause parser\nerrors. eg. `url(var(--somevar))`. Loose mode supports parsing of these features.\n\nLoose Mode is enabled by passing an option of `loose: true` to the `parser` method.\n\n```js\nconst less = 'calc(2+2)'; // not valid per spec, but valid in LESS\nconst cssnext = 'url(var(--somevar))'; // not valid per spec, but in spec draft\n\nconst parser = require('postcss-values-parser');\nconst ast = parser(less, { loose: true }).parse();\n\n// parse will succeed\n```\n\n## Acknowledgements\n\nThis project was heavily influenced by [postcss-selector-parser](https://github.com/postcss/postcss-selector-parser)\nand utilized many patterns and logical constructs from the project.\n\nTests and some tokenizing techniques found in [postcss-value-parser](https://github.com/TrySound/postcss-value-parser)\nwere used.\n\n## Contributing\n\n- `git fork/clone`\n- `npm i`\n- Before PR'ing, make sure `npm test` still pass. Add test if you're adding features.\n\nWhen you tweak [API.md](API.md), please run `npm run toc` before PR'ing.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/lesshint/postcss-values-parser.git"
  },
  "scripts": {
    "test": "gulp"
  },
  "version": "2.0.1"
}
