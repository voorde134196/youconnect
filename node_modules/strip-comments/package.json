{
  "_args": [
    [
      {
        "raw": "strip-comments@^1.0.2",
        "scope": null,
        "escapedName": "strip-comments",
        "name": "strip-comments",
        "rawSpec": "^1.0.2",
        "spec": ">=1.0.2 <2.0.0",
        "type": "range"
      },
      "J:\\Projects\\youconnect\\node_modules\\workbox-build"
    ]
  ],
  "_from": "strip-comments@>=1.0.2 <2.0.0",
  "_id": "strip-comments@1.0.2",
  "_inCache": true,
  "_location": "/strip-comments",
  "_nodeVersion": "10.0.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/strip-comments_1.0.2_1525324040700_0.1445449722040979"
  },
  "_npmUser": {
    "name": "jonschlinkert",
    "email": "github@sellside.com"
  },
  "_npmVersion": "6.0.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "strip-comments@^1.0.2",
    "scope": null,
    "escapedName": "strip-comments",
    "name": "strip-comments",
    "rawSpec": "^1.0.2",
    "spec": ">=1.0.2 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/workbox-build"
  ],
  "_resolved": "https://registry.npmjs.org/strip-comments/-/strip-comments-1.0.2.tgz",
  "_shasum": "82b9c45e7f05873bee53f37168af930aa368679d",
  "_shrinkwrap": null,
  "_spec": "strip-comments@^1.0.2",
  "_where": "J:\\Projects\\youconnect\\node_modules\\workbox-build",
  "author": {
    "name": "Jon Schlinkert",
    "url": "https://github.com/jonschlinkert"
  },
  "bugs": {
    "url": "https://github.com/jonschlinkert/strip-comments/issues"
  },
  "dependencies": {
    "babel-extract-comments": "^1.0.0",
    "babel-plugin-transform-object-rest-spread": "^6.26.0"
  },
  "description": "Strip comments from code. Removes line comments, block comments, the first comment only, or all comments. Optionally leave protected comments unharmed.",
  "devDependencies": {
    "gulp-format-md": "^1.0.0",
    "mocha": "^3.5.3"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-kL97alc47hoyIQSV165tTt9rG5dn4w1dNnBhOQ3bOU1Nc1hel09jnXANaHJ7vzHLd4Ju8kseDGzlev96pghLFw==",
    "shasum": "82b9c45e7f05873bee53f37168af930aa368679d",
    "tarball": "https://registry.npmjs.org/strip-comments/-/strip-comments-1.0.2.tgz",
    "fileCount": 4,
    "unpackedSize": 15279,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJa6pkJCRA9TVsSAnZWagAA+xkP/RMR9GPLVDNfEgsnmTBv\nWLot36AVs/2D1Upvc6uaNVPyel7BiAuKE6V8mGXcr7Dei0uEZZG0ePe5FCIX\nbTDZGGqN7KlHr6BGiR15i/lZIN1tKizZ/bsXktsZLJQq2NeYmvp1RXY+0wdk\nuqbtR68s1Z3VLPr97oQfGDwqiY7rrbvafqnyTmk3QvEbNNc4eJWaehTuEf73\nfIzDfsON1KQGQzH/ew0CWU8+SL0USIg9a9yTxlFVCWCuvUdbhv26UEuDsNKG\npZaUXonWqFiNAZR8XZRekP7MFR1v59FVITSSu1NgRCn4YGSXH4hPrnJ0DHyh\nX4Ra7rggZuNIyjfZVKWu/yRonWEL7sI1S5chF7SjtXjFtnXlTCGfFqXGuLFq\n+0Jnkd9HfDrrU5Az0sz6dLV0pJ06gGEB3vIwU87RGByaYHm2mS0I/OWdB7sF\nAVf0UJyrP5Q6Fu35n0+A8qsI2UzLSiI7Qq+TlwLHSnlQtqrIyVyzmhQaQmly\n/HX066IxEHGHhs5aVcUuqEHWTU/zYzpNPw9k5rJiY6SqIB8wYYDPecEW4fEy\n3bfX0dDCUPJyv8qN0bnpE64BT/9HnxOJ0ro2u+dHc8Str7I0Y7MO0xH1sJGx\nrgicDgT5M6vqa0t8ghXRrNo3MNZpIW5nufGjHmbAyGEF6ANpwLAzrvMVXKDD\ntWej\r\n=Ynjk\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "engines": {
    "node": ">=4"
  },
  "files": [
    "index.js"
  ],
  "gitHead": "47ba53f07ec2e4bdbf972b882397bc848a327b51",
  "homepage": "https://github.com/jonschlinkert/strip-comments",
  "keywords": [
    "babel",
    "babylon",
    "block",
    "block comment",
    "code comment",
    "comment",
    "comments",
    "javascript",
    "line",
    "line comment",
    "remove",
    "strip"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "jonschlinkert",
      "email": "github@sellside.com"
    }
  ],
  "name": "strip-comments",
  "optionalDependencies": {},
  "readme": "# strip-comments [![NPM version](https://img.shields.io/npm/v/strip-comments.svg?style=flat)](https://www.npmjs.com/package/strip-comments) [![NPM monthly downloads](https://img.shields.io/npm/dm/strip-comments.svg?style=flat)](https://npmjs.org/package/strip-comments) [![NPM total downloads](https://img.shields.io/npm/dt/strip-comments.svg?style=flat)](https://npmjs.org/package/strip-comments) [![Linux Build Status](https://img.shields.io/travis/jonschlinkert/strip-comments.svg?style=flat&label=Travis)](https://travis-ci.org/jonschlinkert/strip-comments)\n\n> Strip comments from code. Removes line comments, block comments, the first comment only, or all comments. Optionally leave protected comments unharmed.\n\nPlease consider following this project's author, [Jon Schlinkert](https://github.com/jonschlinkert), and consider starring the project to show your :heart: and support.\n\n- [Install](#install)\n- [Usage](#usage)\n- [API](#api)\n- [About](#about)\n\n_(TOC generated by [verb](https://github.com/verbose/verb) using [markdown-toc](https://github.com/jonschlinkert/markdown-toc))_\n\n## Install\n\nInstall with [npm](https://www.npmjs.com/):\n\n```sh\n$ npm install --save strip-comments\n```\n\n## Usage\n\nBy default all comments are stripped.\n\n```js\nconst strip = require('strip-comments');\nconst str = strip('const foo = \"bar\";// this is a comment\\n /* me too *\\/');\nconsole.log(str);\n// => 'const foo = \"bar\";\\n'\n```\n\nFor more use-cases see the [tests](./test/test.js)\n\n## API\n\n### [strip](index.js#L34)\n\nStrip all code comments from the given `input`, including protected comments that start with `!`, unless disabled by setting `options.keepProtected` to true.\n\n**Params**\n\n* `input` **{String}**: string from which to strip comments\n* `options` **{Object}**: optional options, passed to [extract-comments](https://github.com/jonschlinkert/extract-comments)  \n* `returns` **{String}**: modified input\n\n**Options**\n\n- `line` **{Boolean}**: if `false` strip only block comments, default `true`\n- `block` **{Boolean}**: if `false` strip only line comments, default `true`\n- `keepProtected` **{Boolean}**: Keep ignored comments (e.g. `/*!`, `/**!` and `//!`)\n- `preserveNewlines` **{Boolean}**: Preserve newlines after comments are stripped\n\n**Example**\n\n```js\nconst str = strip('const foo = \"bar\";// this is a comment\\n /* me too */');\nconsole.log(str);\n// => 'const foo = \"bar\";'\n```\n\n### [.block](index.js#L54)\n\nStrip only block comments.\n\n**Params**\n\n* `input` **{String}**: string from which to strip comments\n* `options` **{Object}**: pass `opts.keepProtected: true` to keep ignored comments (e.g. `/*!`)\n* `returns` **{String}**: modified string\n\n**Example**\n\n```js\nconst strip = require('..');\nconst str = strip.block('const foo = \"bar\";// this is a comment\\n /* me too */');\nconsole.log(str);\n// => 'const foo = \"bar\";// this is a comment'\n```\n\n### [.line](index.js#L73)\n\nStrip only line comments.\n\n**Params**\n\n* `input` **{String}**: string from which to strip comments\n* `options` **{Object}**: pass `opts.keepProtected: true` to keep ignored comments (e.g. `//!`)\n* `returns` **{String}**: modified string\n\n**Example**\n\n```js\nconst str = strip.line('const foo = \"bar\";// this is a comment\\n /* me too */');\nconsole.log(str);\n// => 'const foo = \"bar\";\\n/* me too */'\n```\n\n### [.first](index.js#L93)\n\nStrip the first comment from the given `input`. Or, if `opts.keepProtected` is true, the first non-protected comment will be stripped.\n\n**Params**\n\n* `input` **{String}**\n* `options` **{Object}**: pass `opts.keepProtected: true` to keep comments with `!`\n* `returns` **{String}**\n\n**Example**\n\n```js\nconst output = strip.first(input, { keepProtected: true });\nconsole.log(output);\n// => '//! first comment\\nfoo; '\n```\n\n## About\n\n<details>\n<summary><strong>Contributing</strong></summary>\n\nPull requests and stars are always welcome. For bugs and feature requests, [please create an issue](../../issues/new).\n\n</details>\n\n<details>\n<summary><strong>Running Tests</strong></summary>\n\nRunning and reviewing unit tests is a great way to get familiarized with a library and its API. You can install dependencies and run tests with the following command:\n\n```sh\n$ npm install && npm test\n```\n\n</details>\n\n<details>\n<summary><strong>Building docs</strong></summary>\n\n_(This project's readme.md is generated by [verb](https://github.com/verbose/verb-generate-readme), please don't edit the readme directly. Any changes to the readme must be made in the [.verb.md](.verb.md) readme template.)_\n\nTo generate the readme, run the following command:\n\n```sh\n$ npm install -g verbose/verb#dev verb-generate-readme && verb\n```\n\n</details>\n\n### Related projects\n\nYou might also be interested in these projects:\n\n* [babel-extract-comments](https://www.npmjs.com/package/babel-extract-comments): Uses babel (babylon) to extract JavaScript code comments from a JavaScript string or file. | [homepage](https://github.com/jonschlinkert/babel-extract-comments \"Uses babel (babylon) to extract JavaScript code comments from a JavaScript string or file.\")\n* [code-context](https://www.npmjs.com/package/code-context): Parse a string of javascript to determine the context for functions, variables and comments based… [more](https://github.com/jonschlinkert/code-context) | [homepage](https://github.com/jonschlinkert/code-context \"Parse a string of javascript to determine the context for functions, variables and comments based on the code that follows.\")\n* [extract-comments](https://www.npmjs.com/package/extract-comments): Uses esprima to extract line and block comments from a string of JavaScript. Also optionally… [more](https://github.com/jonschlinkert/extract-comments) | [homepage](https://github.com/jonschlinkert/extract-comments \"Uses esprima to extract line and block comments from a string of JavaScript. Also optionally parses code context (the next line of code after a comment).\")\n* [parse-code-context](https://www.npmjs.com/package/parse-code-context): Parse code context in a single line of javascript, for functions, variable declarations, methods, prototype… [more](https://github.com/jonschlinkert/parse-code-context) | [homepage](https://github.com/jonschlinkert/parse-code-context \"Parse code context in a single line of javascript, for functions, variable declarations, methods, prototype properties, prototype methods etc.\")\n* [parse-comments](https://www.npmjs.com/package/parse-comments): Parse code comments from JavaScript or any language that uses the same format. | [homepage](https://github.com/jonschlinkert/parse-comments \"Parse code comments from JavaScript or any language that uses the same format.\")\n\n### Contributors\n\n| **Commits** | **Contributor** | \n| --- | --- |\n| 59 | [jonschlinkert](https://github.com/jonschlinkert) |\n| 4 | [charlike-old](https://github.com/charlike-old) |\n| 2 | [mk-pmb](https://github.com/mk-pmb) |\n| 1 | [kgryte](https://github.com/kgryte) |\n| 1 | [epicoxymoron](https://github.com/epicoxymoron) |\n\n### Author\n\n**Jon Schlinkert**\n\n* [LinkedIn Profile](https://linkedin.com/in/jonschlinkert)\n* [GitHub Profile](https://github.com/jonschlinkert)\n* [Twitter Profile](https://twitter.com/jonschlinkert)\n\n### License\n\nCopyright © 2018, [Jon Schlinkert](https://github.com/jonschlinkert).\nReleased under the [MIT License](LICENSE).\n\n***\n\n_This file was generated by [verb-generate-readme](https://github.com/verbose/verb-generate-readme), v0.6.0, on March 24, 2018._",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/jonschlinkert/strip-comments.git"
  },
  "scripts": {
    "test": "mocha"
  },
  "verb": {
    "toc": true,
    "layout": "default",
    "tasks": [
      "readme"
    ],
    "plugins": [
      "gulp-format-md"
    ],
    "helpers": [
      "./examples/support/helpers.js"
    ],
    "related": {
      "list": [
        "babel-extract-comments",
        "code-context",
        "extract-comments",
        "parse-code-context",
        "parse-comments"
      ]
    },
    "lint": {
      "reflinks": true
    }
  },
  "version": "1.0.2"
}
