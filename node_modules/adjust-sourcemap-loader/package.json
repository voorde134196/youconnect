{
  "_args": [
    [
      {
        "raw": "adjust-sourcemap-loader@2.0.0",
        "scope": null,
        "escapedName": "adjust-sourcemap-loader",
        "name": "adjust-sourcemap-loader",
        "rawSpec": "2.0.0",
        "spec": "2.0.0",
        "type": "version"
      },
      "J:\\Projects\\youconnect\\node_modules\\resolve-url-loader"
    ]
  ],
  "_from": "adjust-sourcemap-loader@2.0.0",
  "_hasShrinkwrap": false,
  "_id": "adjust-sourcemap-loader@2.0.0",
  "_location": "/adjust-sourcemap-loader",
  "_nodeVersion": "6.14.4",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/adjust-sourcemap-loader_2.0.0_1550222734827_0.30708624653383154"
  },
  "_npmUser": {
    "name": "bholloway",
    "email": "npm@bholloway.com"
  },
  "_npmVersion": "5.10.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "adjust-sourcemap-loader@2.0.0",
    "scope": null,
    "escapedName": "adjust-sourcemap-loader",
    "name": "adjust-sourcemap-loader",
    "rawSpec": "2.0.0",
    "spec": "2.0.0",
    "type": "version"
  },
  "_requiredBy": [
    "/resolve-url-loader"
  ],
  "_resolved": "https://registry.npmjs.org/adjust-sourcemap-loader/-/adjust-sourcemap-loader-2.0.0.tgz",
  "_shasum": "6471143af75ec02334b219f54bc7970c52fb29a4",
  "_shrinkwrap": null,
  "_spec": "adjust-sourcemap-loader@2.0.0",
  "_where": "J:\\Projects\\youconnect\\node_modules\\resolve-url-loader",
  "author": {
    "name": "bholloway"
  },
  "bugs": {
    "url": "https://github.com/bholloway/adjust-sourcemap-loader/issues"
  },
  "dependencies": {
    "assert": "1.4.1",
    "camelcase": "5.0.0",
    "loader-utils": "1.2.3",
    "object-path": "0.11.4",
    "regex-parser": "2.2.10"
  },
  "description": "Webpack loader that adjusts source maps",
  "devDependencies": {
    "jshint": "^2.10.1"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-4hFsTsn58+YjrU9qKzML2JSSDqKvN8mUGQ0nNIrfPi8hmIONT4L3uUaT6MKdMsZ9AjsU6D2xDkZxCkbQPxChrA==",
    "shasum": "6471143af75ec02334b219f54bc7970c52fb29a4",
    "tarball": "https://registry.npmjs.org/adjust-sourcemap-loader/-/adjust-sourcemap-loader-2.0.0.tgz",
    "fileCount": 29,
    "unpackedSize": 37846,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJcZoWPCRA9TVsSAnZWagAAlQIQAJuE9dQCgykEOUWRYNig\nykDPy9Y0b1RoESHyIxb+MlFiZQ0Uy1gP29hU2EQQfJZBPkGOnn2nxjl5Sw+o\nXUFPx1wqDVY9mjWGUnoXE9FsmVz8Dx6C5X0799NKVPFIpR0QeF9IgA3+plup\ngizxznWMiTWRZMg3REZBHDDK+lV0RHJTZ0heEBR+gBJjrKPHvViEI1ctgPJg\ng7qujYOFClkItFnYjqb8Z0dAUSvVs8oisWytB9OjD4botFSbJ5XLVBjvxBIN\n40Vl/p2qnPC9boGJsBzYnfoAEuycu88nzZBAX5Qwug9ZZe7JFjF5asZqIYEL\nn8Bs3sMjOCpuFYNcmpzqPTI1pxvoOTf9yTRUipNdZxkfg+cIeOG3+wXJK8WP\n4OJHZrlyIMYEn0zcEW+5AAmaS/FTnfgcnuhAKIy10xdg9yjZsuA+oHEWGa3y\ns7jXlsbJSWAT8/k/YoZFoHHlNEqlWq+vyd7OGOH2ycU0TtE/+d2fnkyLwThU\nTCOhv9XxtFUefaPZRpgwOCDgNEjHLs5Z0Aazyp5Ubo5uaskG/u9wxr+ltsy3\nevRJb+surm65kZKdy53bAdYeYDVsGpO/sFL7ymoIjc+jS/XPe8p/AtQiD19K\ntB1zv2PnjVa6zIXKaIbzePemJjDAjGu7dKCVuoV8SaGuzfnL0sDyi3/RSqCn\nthR1\r\n=4dv0\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "gitHead": "b5781ceed0a5f7287a081ddaa28de455d05262cf",
  "homepage": "https://github.com/bholloway/adjust-sourcemap-loader",
  "keywords": [
    "webpack",
    "loader",
    "source-map",
    "sourcemap",
    "sources",
    "resolve",
    "adjust"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "bholloway",
      "email": "npm@bholloway.com"
    }
  ],
  "name": "adjust-sourcemap-loader",
  "optionalDependencies": {},
  "readme": "# Adjust Source-map Loader\n\n[![NPM](https://nodei.co/npm/adjust-sourcemap-loader.png)](http://github.com/bholloway/adjust-sourcemap-loader)\n\nWebpack loader that adjusts source maps.\n\nUse as a **loader** to debug source-maps or to adjust source-maps between other loaders.\n\nUse as a **module filename template** to ensure the final source-map are to your liking.\n\n## Usage : Loader\n\n``` javascript\nrequire('adjust-sourcemap?format=absolute!babel?sourceMap');\n```\n\n### Source maps required\n\nNote that **source maps** must be enabled on any preceding loader. In the above example we use `babel?sourceMap`.\n\n### Apply via webpack config\n\nIt is preferable to adjust your `webpack.config` so to avoid having to prefix every `require()` statement:\n\n``` javascript\nmodule.exports = {\n  module: {\n    loaders: [\n      {\n        test   : /\\.js/,\n        loaders: ['adjust-sourcemap?format=absolute', 'babel?sourceMap']\n      }\n    ]\n  }\n};\n```\n\n## Usage : Module filename template\n\nSpecifying a certain format as the final step in a loader chain will **not** influence the final source format that Webpack will output. Instead the format is determined by the **module filename template**.\n\nThere are limitations to the filename templating that Webpack provides. This package may also operate as a custom template function that will convert output source-map sources to the desired `format`.\n\nIn the following example we ensure project-relative source-map sources are output.\n\n```javascript\nvar templateFn = require('adjust-sourcemap-loader')\n  .moduleFilenameTemplate({\n    format: 'projectRelative'\n  });\n\nmodule.exports = {\n  output: {\n    ...\n    devtoolModuleFilenameTemplate        : templateFn,\n    devtoolFallbackModuleFilenameTemplate: templateFn\n  }\n};\n```\n\n## Options\n\nAs a loader, options may be set using [query parameters](https://webpack.github.io/docs/using-loaders.html#query-parameters) or by using [programmatic parameters](https://webpack.github.io/docs/how-to-write-a-loader.html#programmable-objects-as-query-option). Programmatic means the following in your `webpack.config`.\n\n```javascript\nmodule.exports = {\n   adjustSourcemapLoader: {\n      ...\n   }\n}\n```\n\nWhere `...` is a hash of any of the following options.\n\n* **`debug`** : `boolean|RegExp` May be used alone (boolean) or with a `RegExp` to match the resource(s) you are interested in debugging.\n\n* **`fail`** : `boolean` Implies an **Error** if a source-map source cannot be decoded.\n\n* **`format`** : `string` Optional output format for source-map `sources`. Must be the camel-case name of one of the available `codecs`. Omitting the format will result in **no change** and the outgoing source-map will match the incomming one.\n\n* **`root`** : `boolean` A boolean flag that indices that a `sourceRoot` path sould be included in the output map. This is contingent on a `format` being specified.\n\n* **`codecs`** : `Array.<{name:string, decode:function, encode:function, root:function}>` Optional Array of codecs. There are a number of built-in codecs available. If you specify you own codecs you will loose those that are built-in. However you can include them from the `codec/` directory.\n\nNote that **query** parameters take precedence over **programmatic** parameters.\n\n### Changing the format\n\nBuilt-in codecs that may be specified as a `format` include:\n\n* `absolute`\n* `outputRelative`\n* `projectRelative`\n* `webpackProtocol`\n* `sourceRelative` (works for loader only, **not** Module filename template)\n\n### Specifying codecs\n\nThere are additional built-in codecs that do not support encoding. These are still necessary to decode source-map sources. If you specify your own `options.codecs` then you should **also include the built-in codecs**. Otherwise you will find that some sources cannot be decoded.\n\nThe existing codecs may be found in `/codec`, or on the loader itself:\n\n```javascript\nvar inBuiltCodecs = require('adjust-sourcemap-loader').codecs,\n    myCodecs      = [\n      {\n        name  : 'foo',\n        decode: function(uri) {...},\n        encode: function(absolute) {...},\n        root  : function() {...}\n      },\n      ...\n    ];\n\nmodule.exports = {\n   adjustSourcemapLoader: {\n      codecs: inBuiltCodecs.concat(myCodecs)\n   }\n}\n```\n\nThe codec **order is important**. Those that come first have precedence. Any codec that detects a distinct URI should be foremost so that illegal paths are not encountered by successive codecs.\n\n### Abstract codecs\n\nA codec that detects generated code and cannot `decode()` a URI to an absolute file path.\n\nInstead of implementing `encode()` or `root()` it should instead specify `abstract:true`. Its `decode()` function then may return `boolean` where it detects such generated sources.\n\nFor example, a built-in abstract codec will match the **Webpack bootstrap** code and ensure that its illegal source uri is not encountered by later coders.\n\n## How it works\n\nThe loader will receive a source map as its second parameter, so long as the preceding loader was using source-maps.\n\nThe exception is the **css-loader** where the source-map is in the content, which is **not currently supported** .\n\nThe source-map `sources` are parsed by applying **codec.decode()** functions until one of them returns an absolute path to a file that exists. The exception is abstract codecs, where the source with remain unchanged.\n\nIf a format is specified then the source-map `sources` are recreated by applying the **codec.encode()** function for the stated `format` and (where the `root` option is specified) the **codec.root()** function will set the source-map `sourceRoot`.\n\nIf a codec does not specify **codec.encode()** or **codec.root()** then it may **not** be used as the `format`.\n\n",
  "readmeFilename": "readme.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/bholloway/adjust-sourcemap-loader.git"
  },
  "scripts": {
    "lint": "jshint index.js lib"
  },
  "version": "2.0.0"
}
