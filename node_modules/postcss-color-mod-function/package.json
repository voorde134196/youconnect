{
  "_args": [
    [
      {
        "raw": "postcss-color-mod-function@^3.0.3",
        "scope": null,
        "escapedName": "postcss-color-mod-function",
        "name": "postcss-color-mod-function",
        "rawSpec": "^3.0.3",
        "spec": ">=3.0.3 <4.0.0",
        "type": "range"
      },
      "J:\\Projects\\youconnect\\node_modules\\postcss-preset-env"
    ]
  ],
  "_from": "postcss-color-mod-function@^3.0.3",
  "_hasShrinkwrap": false,
  "_id": "postcss-color-mod-function@3.0.3",
  "_location": "/postcss-color-mod-function",
  "_nodeVersion": "10.11.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/postcss-color-mod-function_3.0.3_1537729104527_0.171900465351285"
  },
  "_npmUser": {
    "name": "jonathantneal",
    "email": "jonathantneal@hotmail.com"
  },
  "_npmVersion": "6.4.1",
  "_phantomChildren": {},
  "_requested": {
    "raw": "postcss-color-mod-function@^3.0.3",
    "scope": null,
    "escapedName": "postcss-color-mod-function",
    "name": "postcss-color-mod-function",
    "rawSpec": "^3.0.3",
    "spec": ">=3.0.3 <4.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/postcss-preset-env"
  ],
  "_resolved": "https://registry.npmjs.org/postcss-color-mod-function/-/postcss-color-mod-function-3.0.3.tgz",
  "_shasum": "816ba145ac11cc3cb6baa905a75a49f903e4d31d",
  "_shrinkwrap": null,
  "_spec": "postcss-color-mod-function@^3.0.3",
  "_where": "J:\\Projects\\youconnect\\node_modules\\postcss-preset-env",
  "author": {
    "name": "Jonathan Neal",
    "email": "jonathantneal@hotmail.com"
  },
  "bugs": {
    "url": "https://github.com/jonathantneal/postcss-color-mod-function/issues"
  },
  "dependencies": {
    "@csstools/convert-colors": "^1.4.0",
    "postcss": "^7.0.2",
    "postcss-values-parser": "^2.0.0"
  },
  "description": "Modify colors using the color-mod() function in CSS",
  "devDependencies": {
    "@babel/core": "^7.1.0",
    "@babel/plugin-syntax-dynamic-import": "^7.0.0",
    "@babel/preset-env": "^7.1.0",
    "babel-eslint": "^9.0.0",
    "eslint": "^5.6.0",
    "eslint-config-dev": "^2.0.0",
    "postcss-tape": "^2.2.0",
    "pre-commit": "^1.2.2",
    "rollup": "^0.66.2",
    "rollup-plugin-babel": "^4.0.3"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-YP4VG+xufxaVtzV6ZmhEtc+/aTXH3d0JLpnYfxqTvwZPbJhWqp8bSY3nfNzNRFLgB4XSaBA82OE4VjOOKpCdVQ==",
    "shasum": "816ba145ac11cc3cb6baa905a75a49f903e4d31d",
    "tarball": "https://registry.npmjs.org/postcss-color-mod-function/-/postcss-color-mod-function-3.0.3.tgz",
    "fileCount": 8,
    "unpackedSize": 357866,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJbp+JRCRA9TVsSAnZWagAArXAP/j8wVBPIMSvIqtR1Xi9R\nCQU0Dasm6XoHoTTtiggGxjc6sNJWq4lt59jhkv8dhtpjgKVwfajc2ScNBD1/\nDEXsONFCHjdAsALQ+FeO9lLCE8vinNRGYIdmnOUnnscuF9KCVeIwgUBF7+h5\nq7MsijwAzVGdPsF9BdwKfDpULGz1/MOrbzSydUjiQ0C6lKPesmBKBS7YUx9N\nohpshsJZ+ZRpKdHoiYndqyej8LTRPcUAMJBIpnaddt1HztOZeukTP8pejazP\nn8PKoVTf9f1DESDpJga7k7puRxF2QZp7s0ylz4BAsaVPtHFNsVF++2LRnb7+\nqbVTzvwu08Q6XGN8/5YtRQEAIrGbM7WwAt4Nrd2eidAmk2NfFiEkOud/BlnC\np2rkbusZRs0uh2FL/pXvtC5AezA+GXpmxTPK+NkCmg45BtmhemDTWXqgTiM/\n8KQU1Ebu1gExRjimVoAg9GBH9N4Bz2qy7RX77aO1YAS5oX53HUCGP1SqmAsA\nj1/gJyhn5FuR/n0z6i0eFWO/mT28+BIyw3sRRsNYsH2rO0ScWOr7y2Eow0EK\nJWiit8QnR2yTWs+PhmE7c09zaS3KM6b6o5c9JcdQYWAx7gjnbm3dRN+POxP1\njRN/H4lk86EERtdJeL/BS1PmxFkAL9DzwtOiPuwqaWhVsWGR3VmFfuEmKuAM\nlp07\r\n=ayRS\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "engines": {
    "node": ">=6.0.0"
  },
  "eslintConfig": {
    "extends": "dev",
    "parser": "babel-eslint",
    "rules": {
      "max-params": [
        2,
        5
      ]
    }
  },
  "files": [
    "index.cjs.js",
    "index.cjs.js.map",
    "index.es.mjs",
    "index.es.mjs.map"
  ],
  "gitHead": "9ff8cac91d105ed370d8fe62e5e8a0c3b4a3003c",
  "homepage": "https://github.com/jonathantneal/postcss-color-mod-function#readme",
  "keywords": [
    "postcss",
    "css",
    "postcss-plugin",
    "colors",
    "colours",
    "modifications",
    "mods",
    "adjusters",
    "adjustments",
    "csswg",
    "rgba",
    "hsla",
    "white",
    "black",
    "red",
    "green",
    "blue",
    "alpha",
    "hue",
    "saturation",
    "lightness",
    "whiteness",
    "blackness",
    "tint",
    "shade",
    "blenda",
    "contrast"
  ],
  "license": "CC0-1.0",
  "main": "index.cjs.js",
  "maintainers": [
    {
      "name": "jonathantneal",
      "email": "jonathantneal@hotmail.com"
    }
  ],
  "module": "index.es.mjs",
  "name": "postcss-color-mod-function",
  "optionalDependencies": {},
  "readme": "# PostCSS color-mod() Function [<img src=\"https://postcss.github.io/postcss/logo.svg\" alt=\"PostCSS Logo\" width=\"90\" height=\"90\" align=\"right\">][postcss]\n\n[![NPM Version][npm-img]][npm-url]\n[![CSS Standard Status][css-img]][css-url]\n[![Build Status][cli-img]][cli-url]\n[![Support Chat][git-img]][git-url]\n\n[PostCSS color-mod() Function] lets you modify colors using the `color-mod()`\nfunction in CSS, following the [CSS Color Module Level 4] specification.\n\n**`color-mod()` has been removed from the Color Module Level 4 specification.**\n\n```pcss\n:root {\n  --brand-red:      color-mod(yellow blend(red 50%));\n  --brand-red-hsl:  color-mod(yellow blend(red 50% hsl));\n  --brand-red-hwb:  color-mod(yellow blend(red 50% hwb));\n  --brand-red-dark: color-mod(red blackness(20%));\n}\n\n/* becomes */\n\n:root {\n  --brand-red:      rgb(255, 127.5, 0);\n  --brand-red-hsl:  rgb(255, 127.5, 255);\n  --brand-red-hwb:  rgb(255, 127.5, 0);\n  --brand-red-dark: rgb(204, 0, 0);\n}\n\n/* or, using stringifier(color) { return color.toString() } */\n\n:root {\n  --brand-red:      rgb(100% 50% 0% / 100%);\n  --brand-red-hsl:  hsl(30 100% 50% / 100%);\n  --brand-red-hwb:  hwb(30 0% 0% / 100%);\n  --brand-red-dark: hwb(0 0% 20% / 100%);\n}\n```\n\n### Supported Colors\n\nThe `color-mod()` function accepts `rgb()`, legacy comma-separated `rgb()`,\n`rgba()`, `hsl()`, legacy comma-separated `hsl()`, `hsla()`, `hwb()`, and\n`color-mod()` colors, as well as 3, 4, 6, and 8 digit hex colors, and named\ncolors without the need for additional plugins.\n\nImplemention details are available in\n[the specification](https://drafts.csswg.org/css-color/#funcdef-color-mod).\n\n### Supported Color Adjusters\n\nThe `color-mod()` function accepts `red()`, `green()`, `blue()`, `a()` /\n`alpha()`, `rgb()`, `h()` / `hue()`, `s()` / `saturation()`, `l()` /\n`lightness()`, `w()` / `whiteness()`, `b()` / `blackness()`, `tint()`,\n`shade()`, `blend()`, `blenda()`, and `contrast()` color adjusters.\n\nImplemention details are available in\n[the specification](https://drafts.csswg.org/css-color/#typedef-color-adjuster).\n\n### Supported Variables\n\nBy default, `var()` variables will be used if their corresponding Custom\nProperties are found in a `:root` rule, or if a fallback value is specified.\n\n## Usage\n\nAdd [PostCSS color-mod() Function] to your project:\n\n```bash\nnpm install postcss-color-mod-function --save-dev\n```\n\nUse [PostCSS color-mod() Function] to process your CSS:\n\n```js\nconst postcssColorMod = require('postcss-color-mod-function');\n\npostcssColorMod.process(YOUR_CSS /*, processOptions, pluginOptions */);\n```\n\nOr use it as a [PostCSS] plugin:\n\n```js\nconst postcss = require('postcss');\nconst postcssColorMod = require('postcss-color-mod-function');\n\npostcss([\n  postcssColorMod(/* pluginOptions */)\n]).process(YOUR_CSS /*, processOptions */);\n```\n\n[PostCSS color-mod() Function] runs in all Node environments, with special instructions for:\n\n| [Node](INSTALL.md#node) | [PostCSS CLI](INSTALL.md#postcss-cli) | [Webpack](INSTALL.md#webpack) | [Create React App](INSTALL.md#create-react-app) | [Gulp](INSTALL.md#gulp) | [Grunt](INSTALL.md#grunt) |\n| --- | --- | --- | --- | --- | --- |\n\n## Options\n\n### stringifier\n\nThe `stringifier` option defines how transformed colors will be produced in CSS.\nBy default, legacy `rbg()` and `rgba()` colors are produced, but this can be\neasily updated to support [CSS Color Module Level 4 colors] colors.\n\n```js\nimport postcssColorMod from 'postcss-color-mod-function';\n\npostcssColorMod({\n  stringifier(color) {\n    return color.toString(); // use CSS Color Module Level 4 colors (rgb, hsl, hwb)\n  }\n});\n```\n\nFuture major releases of [PostCSS color-mod() Function] may reverse this\nfunctionality so that CSS Color Module Level 4 colors are produced by default.\n\n### unresolved\n\nThe `unresolved` option defines how unresolved functions and arguments should\nbe handled. The available options are `throw`, `warn`, and `ignore`. The\ndefault option is to `throw`.\n\nIf `ignore` is used, the `color-mod()` function will remain unchanged.\n\n```js\nimport postcssColorMod from 'postcss-color-mod-function';\n\npostcssColorMod({\n  unresolved: 'ignore' // ignore unresolved color-mod() functions\n});\n```\n\n### transformVars\n\nThe `transformVars` option defines whether `var()` variables used within\n`color-mod()` should be transformed into their corresponding Custom Properties\navailable in `:root`, or their fallback value if it is specified. By default,\n`var()` variables will be transformed.\n\nHowever, because these transformations occur at build time, they cannot be\nconsidered accurate. Accurately resolving cascading variables relies on\nknowledge of the living DOM tree.\n\n### importFrom\n\nThe `importFrom` option allows you to import variables from other sources,\nwhich might be CSS, JS, and JSON files, and directly passed objects.\n\n```js\npostcssColorMod({\n  importFrom: 'path/to/file.css' // :root { --brand-dark: blue; --brand-main: var(--brand-dark); }\n});\n```\n\n```pcss\n.brand-faded {\n  color: color-mod(var(--brand-main) a(50%));\n}\n\n/* becomes */\n\n.brand-faded {\n  color: rgba(0, 0, 255, .5);\n}\n```\n\nMultiple files can be passed into this option, and they will be parsed in the\norder they were received. JavaScript files, JSON files, and objects will need\nto namespace custom properties under a `customProperties` or\n`custom-properties` key.\n\n```js\npostcssColorMod({\n  importFrom: [\n    'path/to/file.css',   // :root { --brand-dark: blue; --brand-main: var(--brand-dark); }\n    'and/then/this.js',   // module.exports = { customProperties: { '--brand-dark': 'blue', '--brand-main': 'var(--brand-dark)' } }\n    'and/then/that.json', // { \"custom-properties\": { \"--brand-dark\": \"blue\", \"--brand-main\": \"var(--brand-dark)\" } }\n    {\n      customProperties: {\n        '--brand-dark': 'blue',\n        '--brand-main': 'var(--brand-dark)'\n      }\n    }\n  ]\n});\n```\n\nVariables may reference other variables, and this plugin will attempt to\nresolve them. If `transformVars` is set to `false` then `importFrom` will not\nbe used.\n\n[cli-img]: https://img.shields.io/travis/jonathantneal/postcss-color-mod-function.svg\n[cli-url]: https://travis-ci.org/jonathantneal/postcss-color-mod-function\n[css-img]: https://cssdb.org/badge/color-mod-function.svg\n[css-url]: https://preset-env.cssdb.org/features#color-mod-function\n[git-img]: https://img.shields.io/badge/support-chat-blue.svg\n[git-url]: https://gitter.im/postcss/postcss\n[npm-img]: https://img.shields.io/npm/v/postcss-color-mod-function.svg\n[npm-url]: https://www.npmjs.com/package/postcss-color-mod-function\n\n[CSS Color Module Level 4]: https://www.w3.org/TR/css-color-4/#funcdef-color-mod\n[Gulp PostCSS]: https://github.com/postcss/gulp-postcss\n[Grunt PostCSS]: https://github.com/nDmitry/grunt-postcss\n[PostCSS]: https://github.com/postcss/postcss\n[PostCSS color-mod() Function]: https://github.com/jonathantneal/postcss-color-mod-function\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/jonathantneal/postcss-color-mod-function.git"
  },
  "scripts": {
    "prepublishOnly": "npm test",
    "pretest": "rollup -c .rollup.js --silent",
    "test": "echo 'Running tests...'; npm run test:js && npm run test:tape",
    "test:js": "eslint *.js lib/*.js --cache --ignore-path .gitignore --quiet",
    "test:tape": "postcss-tape"
  },
  "version": "3.0.3"
}
