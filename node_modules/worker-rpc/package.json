{
  "_args": [
    [
      {
        "raw": "worker-rpc@^0.1.0",
        "scope": null,
        "escapedName": "worker-rpc",
        "name": "worker-rpc",
        "rawSpec": "^0.1.0",
        "spec": ">=0.1.0 <0.2.0",
        "type": "range"
      },
      "J:\\Projects\\youconnect\\node_modules\\fork-ts-checker-webpack-plugin"
    ]
  ],
  "_from": "worker-rpc@^0.1.0",
  "_hasShrinkwrap": false,
  "_id": "worker-rpc@0.1.1",
  "_location": "/worker-rpc",
  "_nodeVersion": "8.11.3",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/worker-rpc_0.1.1_1558102136673_0.8769591251671542"
  },
  "_npmUser": {
    "name": "dirtyhairy",
    "email": "cnspeckn@googlemail.com"
  },
  "_npmVersion": "5.6.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "worker-rpc@^0.1.0",
    "scope": null,
    "escapedName": "worker-rpc",
    "name": "worker-rpc",
    "rawSpec": "^0.1.0",
    "spec": ">=0.1.0 <0.2.0",
    "type": "range"
  },
  "_requiredBy": [
    "/fork-ts-checker-webpack-plugin"
  ],
  "_resolved": "https://registry.npmjs.org/worker-rpc/-/worker-rpc-0.1.1.tgz",
  "_shasum": "cb565bd6d7071a8f16660686051e969ad32f54d5",
  "_shrinkwrap": null,
  "_spec": "worker-rpc@^0.1.0",
  "_where": "J:\\Projects\\youconnect\\node_modules\\fork-ts-checker-webpack-plugin",
  "author": {
    "name": "Christian Speckner",
    "email": "cnspeckn@googlemail.com",
    "url": "https://github.com/DirtyHairy/"
  },
  "bugs": {
    "url": "https://github.com/DirtyHairy/worker-rpc/issues"
  },
  "dependencies": {
    "microevent.ts": "~0.1.1"
  },
  "description": "A simple RPC layer for communicating with web workers and over other transports",
  "devDependencies": {
    "mocha": "~6.1.4",
    "typescript": "~3.4.5",
    "typings": "~2.1.1"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-P1WjMrUB3qgJNI9jfmpZ/htmBEjFh//6l/5y8SD9hg1Ef5zTTVVoRjTrTEzPrNBQvmhMxkoTsjOXN10GWU7aCg==",
    "shasum": "cb565bd6d7071a8f16660686051e969ad32f54d5",
    "tarball": "https://registry.npmjs.org/worker-rpc/-/worker-rpc-0.1.1.tgz",
    "fileCount": 18,
    "unpackedSize": 105324,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJc3sB5CRA9TVsSAnZWagAAEI4P/iV2Cr1ZQzigIJvviUTr\nEBnuD+IxuZbWMtR5j3EWXUDbtBx+v11P+Lvth6jaU2dQ692ToFy/PXQpDPpA\nFuGnbQdEKl7JaDuzIMiLys4up/zJh/Vywf6VG+a8n1vmt5FKFyyIR4w54f/a\n6mgyyKoZEr9kiQmrAzJPL5FS9h5DfCoDjjl+c4ZXNr5tz3vawWNuTwFb6U1X\nw9XfkTaybBRyDVlGUCqB8toJUSCSvzPPdZeB+l++AC8s0Pp6KFpP65YWWWqh\nrAsJxYwa2Xt9lwBnDUG2WZL1tNrVg9xOsMsFfauMl1TLuEshLLI0EK2ce1J6\nMrFldlUkuNlVEL+2voxUPGJltcMyLcXNZu1QH3ojZPzf1gRjg1KBhiBHdq1g\nMnY6f3ZvhdeNoagJUjN/OyssVYkLgjLHOk5NV97685tSRjivYv8/8D1pmCIR\nFdPS/rfzM4PpBJOVyxhju97EY9KSORSLFNuQ4yDEZnfq2kipuDkhjAgAiL46\nQZbos9adiKQwOQ2GDlNQ9joiB8OrLBzdQUjahXo+wGswKNrPhUw2UNQ7txxG\nMjihbDnpZxtMfVrnTs9jNczMXByvksjC3nXaxPqBTKhPnOxmTn3XOV8f5VZ2\nz0INgwzDFuOngusCCJQFAbx8UK4F4D7PjaVbTGPi7aPoYRjyFzda7g1en3KY\n51od\r\n=hC/K\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "gitHead": "738fec6b388865da99b4f0f1f853d2347e7533e1",
  "homepage": "https://github.com/DirtyHairy/worker-rpc#readme",
  "keywords": [
    "worker",
    "rpc"
  ],
  "license": "MIT",
  "main": "lib/index.js",
  "maintainers": [
    {
      "name": "dirtyhairy",
      "email": "cnspeckn@googlemail.com"
    }
  ],
  "name": "worker-rpc",
  "optionalDependencies": {},
  "readme": "[![Build Status](https://travis-ci.org/DirtyHairy/worker-rpc.svg?branch=master)](https://travis-ci.org/DirtyHairy/worker-rpc)\n[![npm version](https://badge.fury.io/js/worker-rpc.svg)](https://badge.fury.io/js/worker-rpc)\n\n# What is it?\n\nThis package provides a simple RPC mechanism on top of any transport that transfers\nJSON data. It was initially conceived to provide communication with web workers\n(and as such supports transferables), but it can be used on top of many other\ndifferent transport channels, i.e. `postMessage` between frames, websockets via\n`socket.io` or JSON encoded messages over pipes.\n\n# How to use it?\n\n## Installation\n\nYou can install the library into your project via npm\n\n    npm install worker-rpc\n\nThe library is written in Typescript and will work in any environment that\nsupports ES5 and ES6-style promises (either native or through a shim).\nNo external typings are required for using this library with Typescript (version >= 2).\n\n## Web worker example\n\nIn this example, we use the library to set up communication with a web worker.\n\n### Web worker\n\n    import {RpcProvider} from 'worker-rpc';\n\n    const rpcProvider = new RpcProvider(\n        (message, transfer) => postMessage(message, transfer)\n    );\n\n    onmessage = e => rpcProvider.dispatch(e.data);\n\n    rpcProvider.registerRpcHandler('add', ({x, y}) => x + y);\n\nThe RPC provider is initialized with a function that dispatches a message.\nThis function will receive an opaque message object as first argument, and\na list of transferables as second argument. This allows to leverage transfer\nof ownership instead of copying between worker and host page.\n\nOn incoming messages, `dispatch` is called on the RPC provider in order to\nhandle the message.\n\nEach registered RPC handler is identified by a message ID (`add` in this example)\nand has a handler function that receives the message object and can return a\nresult either as an immediate value or as a promise. \n\n### Page\n\n    import {RpcProvider} from 'worker-rpc';\n\n    const worker = new Worker('worker.js'),\n        rpcProvider = new RpcProvider(\n            (message, transfer) => worker.postMessage(message, transfer)\n        );\n    \n    worker.onmessage = e => rpcProvider.dispatch(e.data);\n\n    rpcProvider\n        .rpc('add', {x: 1, y: 2})\n        .then(result => console.log(result)); // 3\n\n## Importing\n\nES5 / CommonJS\n\n    var RpcProvider = require('worker-rpc').RpcProvider;\n\nES6\n\n    import {RpcProvider} from 'worker-rpc';\n\nTypescript\n\n    import {RpcProvider, RpcProviderInterface} from 'worker-rpc';\n\n##  API\n\nThe API is built around the `RpcProvider` class. A `RpcProvider` acts both as\nclient and server for RPC calls and event-like signals. The library uses ES6\npromises and can consume any A+ compliant promises.\n\n### Creating a new provider\n\n    const rpc = new RpcProvider(dispatcher, timeout);\n\n * `dispatcher`: A function that will be called for dispatching messages. The\n    first argument will be an opaque message object, and the second argument\n    an error of `Transferable` objects that are to be passed via ownership\n    transfer (if supported by the transport).\n * `timeout` (optional): The timeout for RPC transactions in milliseconds.\n    Values of `0` or smaller disable the timeout (this is the default).\n\n### Incoming messages\n\n    rpc.dispatch(message);\n\nSimilar to message dispatch, `worker-rpc` does not provide a built-in mechanism\nfor receiving messages. Instead, incoming messages must be relayed to the provider\nby invoking `dispatch`.\n\n * `message`: The received message.\n\n### Registering RPC handlers\n\n    rpc.registerRpcHandler(id, handler);\n\nRegister a handler function for RPC calls with id `id`. Returns the provider instance.\n\n * `id`: RPC call id. Only a single handler can be registered for any id. Ids should\n    be strings.\n * `handler`: The handler function. This function receives the payload object as\n    its argument and can return its result either as an immediate value or as a \n    promise.\n\n### Registering signal handlers\n\n    rpc.registerSignalHandler(id, handler));\n\nRegister a handler function for signals with id `id`. Returns the provider instance.\n\n * `id`: Signal id. The namespace for signal ids is seperate from that of RPC ids,\n    and multiple handlers my be attached tp a single signal. Ids should be strings\n * `handler`: The handler function. This function receives the payload object as\n    its argument; the result is ignored.\n\n### Dispatching RPC calls\n\n    const result = rpc.rpc(id, payload, transfer);\n\nDispatch a RPC call and returns a promise for its result. The promise is rejected\nif the call times out or if no handler is registered (or if the handler rejects\nthe operation).\n\n * `id`: RPC call id.\n * `payload` (optional): RPC call payload.\n * `transfer` (optional): List of `Transferables` that will be passed to dispatched\n   (see above).\n\n### Dispatching signals\n\n    rpc.signal(id, payload, transfer);\n\nDispatch a signal. Returns the provider instance.\n\n * `id`: Signal id.\n * `payload` (optional): Signal payload.\n * `transfer` (optional): List of `Transferables` that will be passed to dispatched\n   (see above).\n\n### Deregistering RPC handlers\n\n    rpc.deregisterRpcHandler(id, handler);\n\n`id` and `handler` must be the same arguments used for `registerRpcHandler`.\nReturns the provider instance.\n\n### Deregistering signal handlers\n\n    rpc.deregisterSignalHandler(id, handler);\n\n`id` and `handler` must be the same arguments used for `registerSignalHandler`.\nReturns the provider instance.\n\n### Errors\n\n    rpc.error.addHandler(errorHandler);\n\nThe error event is dispatched if there is either a local or remote communcation\nerror (timeout, invalid id, etc.). Checkout the\n[microevent.ts](https://github.com/DirtyHairy/microevent)\ndocumentation for the event API.\n\n# License\n\nFeel free to use this library under the conditions of the MIT license.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/DirtyHairy/worker-rpc.git"
  },
  "scripts": {
    "prepublish": "tsc",
    "pretest": "typings install && tsc -p tsconfig.test.json",
    "test": "mocha -R spec -u tdd test"
  },
  "types": "lib/index.d.ts",
  "version": "0.1.1"
}
