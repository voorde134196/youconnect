{
  "_args": [
    [
      {
        "raw": "sane@^4.0.3",
        "scope": null,
        "escapedName": "sane",
        "name": "sane",
        "rawSpec": "^4.0.3",
        "spec": ">=4.0.3 <5.0.0",
        "type": "range"
      },
      "J:\\Projects\\youconnect\\node_modules\\jest-haste-map"
    ]
  ],
  "_from": "sane@^4.0.3",
  "_hasShrinkwrap": false,
  "_id": "sane@4.1.0",
  "_location": "/sane",
  "_nodeVersion": "11.10.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/sane_4.1.0_1552615689436_0.6940174935902432"
  },
  "_npmUser": {
    "name": "stefanpenner",
    "email": "stefan.penner@gmail.com"
  },
  "_npmVersion": "6.7.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "sane@^4.0.3",
    "scope": null,
    "escapedName": "sane",
    "name": "sane",
    "rawSpec": "^4.0.3",
    "spec": ">=4.0.3 <5.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/jest-haste-map"
  ],
  "_resolved": "https://registry.npmjs.org/sane/-/sane-4.1.0.tgz",
  "_shasum": "ed881fd922733a6c461bc189dc2b6c006f3ffded",
  "_shrinkwrap": null,
  "_spec": "sane@^4.0.3",
  "_where": "J:\\Projects\\youconnect\\node_modules\\jest-haste-map",
  "author": {
    "name": "amasad"
  },
  "bin": {
    "sane": "./src/cli.js"
  },
  "bugs": {
    "url": "https://github.com/amasad/sane/issues"
  },
  "dependencies": {
    "@cnakazawa/watch": "^1.0.3",
    "anymatch": "^2.0.0",
    "capture-exit": "^2.0.0",
    "exec-sh": "^0.3.2",
    "execa": "^1.0.0",
    "fb-watchman": "^2.0.0",
    "micromatch": "^3.1.4",
    "minimist": "^1.1.1",
    "walker": "~1.0.5"
  },
  "description": "Sane aims to be fast, small, and reliable file system watcher.",
  "devDependencies": {
    "eslint": "^5.15.1",
    "mocha": "^6.0.2",
    "prettier": "^1.16.4",
    "rimraf": "~2.6.3",
    "tmp": "0.0.33"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-hhbzAgTIX8O7SHfp2c8/kREfEn4qO/9q8C9beyY6+tvZ87EpoZ3i1RIEvp27YBswnNbY9mWd6paKVmKbAgLfZA==",
    "shasum": "ed881fd922733a6c461bc189dc2b6c006f3ffded",
    "tarball": "https://registry.npmjs.org/sane/-/sane-4.1.0.tgz",
    "fileCount": 12,
    "unpackedSize": 51340,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJciwkKCRA9TVsSAnZWagAAc48P/2u3lnNNV0nw4B5fQKun\nVx914X22BcmrgBRwQQYXW8uxvlu6CQjE4mMZxr1Rtf1RXHQ9FSIHcrKK+YkH\nT6KLG+qH4Ae2uBGP2pJY6dqQPyadUGStyOdJ0CCk8pKkqTwsxQ+ybfym/4Ns\nyrjhKgyliD6MvjZlivz4GCsnjuZaK4ob0gMo+/yiErueLy92ndaha2I4msNU\nwLMnY5KofKmyqZFD+0dnCero+GNjxEW070bEfHeCCLELYNUKbwU+RCSaQ/GC\nI7W5ejGyVOplL/QULk2AdYzeb0AVxqHXiN9SfJq9Voau+H1IfTgMR8MuXhD0\nuLmP2uw/m2PoZP9XnkPRzo5RuUJN/SX8bi72Jbq8iyImpMsbbXK50kmGwBwV\n4gqTKM0NJFvBISUrcMAQOo2nHiurRVoR7/lRgtwRZfMtyVPoBjwKGfAu8fWb\nGYcjhfidsZJYs0qdVrN2fXGGcT2Cv3/K/WntgQ6NxuKcZMtAZbZPOaTj4sJL\noE6iqM5tzI4wp5wYFohWWSig/SYZ1tTrjf1F+q/tEG+SxzLqEcGXE20OW4lh\nDtMlP7SVumbad3eX8iR9090tu/hRMP/YYa6z6ehA2cr/5Q1/LX0kqtfAkXPB\no++ZZzMeFbjVN0rkKmFguAnqz5oDoHiezYxXhXNIVir+VKid9+TS+E7e1j27\nZ4Gv\r\n=nFZ0\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "engines": {
    "node": "6.* || 8.* || >= 10.*"
  },
  "files": [
    "src",
    "index.js"
  ],
  "gitHead": "1f04a36446254b46775d77933cd9635fbb666458",
  "homepage": "https://github.com/amasad/sane",
  "keywords": [
    "watch",
    "file",
    "fswatcher",
    "watchfile",
    "fs",
    "watching"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "amasad",
      "email": "amjad.masad@gmail.com"
    },
    {
      "name": "stefanpenner",
      "email": "stefan.penner@gmail.com"
    }
  ],
  "name": "sane",
  "optionalDependencies": {},
  "readme": "[![CircleCI](https://circleci.com/gh/amasad/sane.svg?style=svg)](https://circleci.com/gh/amasad/sane)\n\nsane\n----\n\nI've been driven to insanity by node filesystem watcher wrappers.\nSane aims to be fast, small, and reliable file system watcher. It does that by:\n\n* By default stays away from fs polling because it's very slow and cpu intensive\n* Uses `fs.watch` by default and sensibly works around the various issues\n* Maintains a consistent API across different platforms\n* Where `fs.watch` is not reliable you have the choice of using the following alternatives:\n  * [the facebook watchman library](https://facebook.github.io/watchman/)\n  * [the watchexec library](https://github.com/watchexec/watchexec)\n  * polling\n\n## Install\n\n```\n$ npm install sane\n```\n\n## How to choose a mode\n\nDon't worry too much about choosing the correct mode upfront because sane\nmaintains the same API across all modes and will be easy to switch.\n\n* If you're only supporting Linux and OS X, `watchman` would be the most reliable mode\n* If you're using node > v0.10.0 use the default mode\n* If you're running OS X and you're watching a lot of directories and you're running into https://github.com/joyent/node/issues/5463, use `watchman`\n* If you're in an environment where native file system events aren't available (like Vagrant), you should use polling\n* Otherwise, the default mode should work well for you\n\n## API\n\n### sane(dir, options)\n\nWatches a directory and all its descendant directories for changes, deletions, and additions on files and directories.\n\n```js\nvar watcher = sane('path/to/dir', {glob: ['**/*.js', '**/*.css']});\nwatcher.on('ready', function () { console.log('ready') });\nwatcher.on('change', function (filepath, root, stat) { console.log('file changed', filepath); });\nwatcher.on('add', function (filepath, root, stat) { console.log('file added', filepath); });\nwatcher.on('delete', function (filepath, root) { console.log('file deleted', filepath); });\n// close\nwatcher.close();\n```\n\noptions:\n\n* `glob`: a single string glob pattern or an array of them.\n* `poll`: puts the watcher in polling mode. Under the hood that means `fs.watchFile`.\n* `watchman`: makes the watcher use [watchman](https://facebook.github.io/watchman/).\n* `watchmanPath`: sets a custom path for `watchman` binary.\n* `watchexec`: makes the watcher use [watchexec](https://github.com/watchexec/watchexec).\n* `dot`: enables watching files/directories that start with a dot.\n* `ignored`: a glob, regex, function, or array of any combination.\n\nFor the glob pattern documentation, see [micromatch](https://github.com/micromatch/micromatch).\nIf you choose to use `watchman` you'll have to [install watchman yourself](https://facebook.github.io/watchman/docs/install.html)).\nIf you choose to use `watchexec` you'll have to [install watchexec yourself](https://github.com/watchexec/watchexec)).\nFor the ignored options, see [anymatch](https://github.com/es128/anymatch).\n\n### sane.NodeWatcher(dir, options)\n\nThe default watcher class. Uses `fs.watch` under the hood, and takes the same options as `sane(dir, options)`.\n\n### sane.WatchmanWatcher(dir, options)\n\nThe watchman watcher class. Takes the same options as `sane(dir, options)`.\n\n### sane.Watchexec(dir, options)\n\nThe watchexec watcher class. Takes the same options as `sane(dir, options)`.\n\n### sane.PollWatcher(dir, options)\n\nThe polling watcher class. Takes the same options as `sane(dir, options)` with the addition of:\n\n* interval: indicates how often the files should be polled. (passed to fs.watchFile)\n\n### sane.{Node|Watchman|Watchexec|Poll}Watcher#close\n\nStops watching.\n\n### sane.{Node|Watchman|Watchexec|Poll}Watcher events\n\nEmits the following events:\n\nAll events are passed the file/dir path relative to the root directory\n* `ready` when the program is ready to detect events in the directory\n* `change` when a file changes\n* `add` when a file or directory has been added\n* `delete` when a file or directory has been deleted\n\n## CLI\n\nThis module includes a simple command line interface, which you can install with `npm install sane -g`.\n\n```\nUsage: sane <command> [...directory] [--glob=<filePattern>] [--poll] [--watchman] [--watchman-path=<watchmanBinaryPath>] [--dot] [--wait=<seconds>]\n\nOPTIONS:\n    --glob=<filePattern>\n      A single string glob pattern or an array of them.\n\n    --ignored=<filePattern>\n      A glob, regex, function, or array of any combination.\n\n    --poll, -p\n      Use polling mode.\n\n    --watchman, -w\n      Use watchman (if available).\n\n    --watchman-path=<watchmanBinaryPath>\n      Sets a custom path for watchman binary (if using this mode).\n\n    --dot, -d\n      Enables watching files/directories that start with a dot.\n\n    --wait=<seconds>\n      Duration, in seconds, that watching will be disabled\n      after running <command>. Setting this option will\n      throttle calls to <command> for the specified duration.\n    --quiet, -q\n      Disables sane's console output\n\n    --changes-only, -o\n      Runs <command> only when a change occur. Skips running <command> at startup\n```\n\nIt will watch the given `directory` and run the given <command> every time a file changes.\n\n### CLI example usage\n- `sane 'echo \"A command ran\"'`\n- `sane 'echo \"A command ran\"' --glob='**/*.css'`\n- `sane 'echo \"A command ran\"' site/assets/css --glob='**/*.css'`\n- `sane 'echo \"A command ran\"' --glob='**/*.css' --ignored='**/ignore.css'`\n- `sane 'echo \"A command ran\"' --wait=3`\n- `sane 'echo \"A command ran\"' -p`\n\n## License\n\nMIT\n\n## Credits\nThe CLI was originally based on the [watch CLI](https://github.com/mikeal/watch). Watch is licensed under the Apache License Version 2.0.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/amasad/sane.git"
  },
  "scripts": {
    "format": "prettier --trailing-comma es5 --single-quote --write index.js 'src/**/*.js' 'test/**/*.js'",
    "test": "npm run format && eslint src/ test/ index.js && mocha --bail test/test.js && mocha --bail test/utils-test.js && mocha --bail 'test/watchexec_*-test.js'",
    "test:debug": "mocha debug --bail"
  },
  "version": "4.1.0",
  "warnings": [
    {
      "code": "ENOTSUP",
      "required": {
        "node": "6.* || 8.* || >= 10.*"
      },
      "pkgid": "sane@4.1.0"
    }
  ]
}
